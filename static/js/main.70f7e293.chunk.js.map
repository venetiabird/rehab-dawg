{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/types.ts","utils/timeFormatter.ts","utils/timeCalculation.ts","components/Timer.tsx","hooks/useInterval.ts","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","components/ResponsiveDawgActivityRenderer.tsx","components/DawgResponsiveBar.tsx","components/ProgressNotification.tsx","pages/ProgressReport/ProgressReport.tsx","hooks/useLocalStorage.ts","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","green","blue","purple","orange","red","bronze","gold","black","silver","white","lightblue","darkgreen","getColor","fill","GradeMap","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","DawgContainer","ButtonBaseWithLink","Link","props","color","background","DoneButton","DawgPaw","Paw","ColouredPaw","HatCowboy","svg","Dawg","GuideDog","Figure8Dawg","InfinityOutline","RehabDawg","RehabFigure8Dawg","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","activityTimeStamps","length","lastWalkTimeStamp","slice","shift","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","ActivityContainer","HomePage","setActivityTimeStamps","handleStartWalkButtonClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","handleClick","href","ActivityType","PauseDawg","Pause","PauseWalk","formatTime","difference","Math","floor","formatTimeLeft","timeLeftMap","pad","input","toString","padStart","sessionTime","activityName","calculateActivityTime","walkTimeStamps","result","i","round","CountDownDawg","PauseResumeContainer","Timer","activityType","activityTime","useState","timeElapsed","setTimeElapsed","walkTimeSeconds","isActive","setIsActive","isWalk","Walk","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","activeWalkTime","toggle","x","DawgBone","Bone","DoneActivity","ActiveWalk","setWalkHistory","grade","useParams","walkTime","doneTime","setWalkTime","tempTimeStamps","setSeconds","currentWalk","walk","history","Caveletti","setCavalettiHistory","console","log","Cavaletti","ResponsiveDawgActivityRenderer","graphDataPts","data","keys","indexBy","margin","top","right","bottom","left","padding","scheme","defs","type","size","stagger","rotation","lineWidth","spacing","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","animate","motionStiffness","motionDamping","groupByDate","walks","reduce","accum","datetime","graphDataPt","actTime","ceil","computedDateIndex","toLocaleDateString","existingGraphData","short","medium","long","date","DawgResponsiveBar","walkHistory","graphData","Object","entries","map","key","value","ProgressNotification","totalActivityTime","formatActivityTime","ReportContainer","ProgressReport","currentPage","walksPerPage","indexOfLastWalk","indexOfFirstWalk","useLocalStorage","initialValue","resetLocalStorage","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setItem","stringify","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70f7e293.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 36;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\n// export const green = '#02d386';\n// export const blue = '#198FE3';\n// export const purple = '#6702ff';\n// export const orange = '#f79729';\n// export const red = '#ff0000';\n// export const bronze = '#cd7f32';\n// export const gold = '#ffd700';\n// export const black = '#000000';\n// export const silver = '#C0C0C0';\n// export const white = '#ffffff';\n// export const lightblue = '#0277bd';\n// export const darkgreen = '#006400';\n\ntype Colors = {\n  [key: string]: string\n}\n\nexport const colors: Colors = {\n  green: '#02d386',\n  blue: '#198FE3',\n  purple: '#6702ff',\n  orange: '#f79729',\n  red: '#ff0000',\n  bronze: '#cd7f32',\n  gold: '#ffd700',\n  black: '#000000',\n  silver: '#C0C0C0',\n  white: '#ffffff',\n  lightblue: '#0277bd',\n  darkgreen: '#006400',\n}\n\nexport const getColor = ( fill: string): string => {\n  return colors[fill];\n}\n\nexport const GradeMap = {\n  green: 5,\n  blue: 10,\n  red: 15,\n  bronze: 5,\n  silver: 10,\n  gold: 15\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  colors,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\n\nexport const DawgContainer = styled.div`\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n  ${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || colors.blue};\n`;\n\nexport const DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\nimport { HatCowboy } from '@styled-icons/fa-solid/HatCowboy';\n\nconst DawgPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst DawgHat = styled(HatCowboy)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DawgPaw color={fill} />\n);\n\nexport const ColouredHat: React.FC<IProps> = ( { fill = 'black'}) => (\n  <DawgHat color={fill} />\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\nimport { InfinityOutline }  from '@styled-icons/typicons/InfinityOutline'\nimport { getColor } from '../../utils/constants'\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\nconst Figure8Dawg = styled(InfinityOutline)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);\n\nexport const RehabFigure8Dawg: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Figure8Dawg color={getColor(fill)} />\n);","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { colors } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${colors.silver};\n    border-radius: 5px;\n    padding: 15px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${colors.blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${colors.blue};\n`;\n\ninterface IProps {\n  activityTimeStamps: number[] \n}\n\nexport const Notification: React.FC<IProps> = ({ activityTimeStamps }) => {\n  if (activityTimeStamps.length) {\n    const lastWalkTimeStamp = activityTimeStamps.slice(activityTimeStamps.length - 1).shift();\n    const formatLastWalkTime = moment(lastWalkTimeStamp).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  return (\n    <NotificationContainer>\n      <NotificationText>Start the pooch on their Rehab Journey to see progress!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo, DawgContainer } from '../components/SharedStyles';\nimport { ColouredPaw, ColouredHat } from '../assets/svg/ColouredShapes';\nimport { colors, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { GradeMap } from '../utils/constants';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: left;\njustify-content: space-around;\nborder: 0px solid ${colors.red};\nmargin: 0px 0 20px;\npadding: 0px ${gutterWidth}px 40px 0px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${colors.blue};\nflex-direction: row\n`\n\nconst ActivityContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  activityTimeStamps: number[];\n};\n\nexport const HomePage: React.FC<IProps> = ({ setActivityTimeStamps, activityTimeStamps }) => {\n  const handleStartWalkButtonClick = () => setActivityTimeStamps([Date.now()]);\n  const handleStartCavalettiButtonClick = () => setActivityTimeStamps([Date.now()]);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg\n            <DawgContainer>\n              <RehabDawg fill={colors.green}/>\n              <RehabDawg fill={colors.blue}/>\n              <RehabDawg fill={colors.red}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <ActivityContainer>\n            <StartButton to=\"/walks/green\" onClick={handleStartWalkButtonClick}>\n              <ColouredPaw fill={colors.green} />\n                {GradeMap['green']} mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleStartWalkButtonClick}>\n              <ColouredPaw fill={colors.blue} />\n              {GradeMap['blue']} mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleStartWalkButtonClick}>\n              <ColouredPaw fill={colors.red}/>\n              {GradeMap['red']} mins\n            </StartButton>\n          </ActivityContainer>\n          {/* <HeadingContainer>\n            Cavaletti\n          </HeadingContainer>\n          <ActivityContainer>\n          <StartButton to=\"/cavaletti/bronze\" onClick={handleStartCavalettiButtonClick}>\n              <ColouredHat fill={colors.bronze}/>\n              Rookie\n            </StartButton>\n            <StartButton to=\"/cavaletti/silver\" onClick={handleStartCavalettiButtonClick}>\n              <ColouredHat fill={colors.silver}/>\n              Hot Dawg\n            </StartButton>\n            <StartButton to=\"/cavaletti/gold\" onClick={handleStartCavalettiButtonClick}>\n              <ColouredHat fill={colors.gold}/>\n              Pro Dawg\n            </StartButton>\n          </ActivityContainer> */}\n        </RehabActivityContainer>\n        <Notification activityTimeStamps={activityTimeStamps}/>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","export interface Dictionary<T> {\n  [key: string]: T;\n}\nexport interface IWalk {\n  activityTimeStamps: number[];\n  walk: WalkName;\n}\n\nexport enum ActivityType {\n  Walk,\n  Cavaletti\n}\n\nexport interface ICavaletti {\n  cavaletti: TrickGrade;\n  activityTimeStamps: number[]\n}\n\nexport interface IDisplayGraphDataPoint {\n  date: string;\n  short: number;\n  medium: number;\n  long: number; \n}\n\nexport type WalkName = 'green' | 'blue' | 'red'\nexport type TrickGrade = 'bronze' | 'silver' | 'gold'\n// export type TrickGrade = 'rookie (basic poles)' | 'cowdawg (figure of 8s)' | 'hotdawg (comp ready)'\nexport interface State {\n  walkHistory: IWalk[];\n}\n\n","import { Dictionary } from './types';\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nexport const formatTimeLeftCountUp = (difference: number, walkTime: number): Dictionary<number> | string => {\n  if (difference < walkTime) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import { IWalk, WalkName, TrickGrade} from './types'\nimport { GradeMap } from './constants';\n\nexport const sessionTime = (activityName: WalkName | TrickGrade ): number => {\n  return GradeMap[activityName];\n};\n\n/** \n * The return time is in seconds\n*/\nexport const calculateWeeklyActivityTime = (walks: IWalk[]): number => {\n  let result = 0;\n  result = walks.reduce((accum: number, walk: IWalk) => {\n    return accum = accum + calculateActivityTime(walk.activityTimeStamps);\n  }, 0);\n  return result;\n}\n\n/** \n * The return time is in seconds\n */\nexport const calculateActivityTime = (walkTimeStamps: number[]): number => {\n  let result = 0;\n  for (let i = 0; i < walkTimeStamps.length - 1; i += 2) {\n    const timeDiff = (walkTimeStamps[i+1] - walkTimeStamps[i]);\n    result += timeDiff;\n  }\n  return Math.round(result / 1000);\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useInterval } from '../hooks/useInterval';\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {formatTimeLeft } from '../utils/timeFormatter';\nimport {calculateActivityTime } from '../utils/timeCalculation';\nimport { colors } from '../utils/constants';\nimport { ActivityType } from '../utils/types';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  activityTimeStamps: number[];\n  activityTime: number;\n  activityType: ActivityType;\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void;\n}\n\n// activity type could part of the Activity Type ... refactor!\nexport const Timer: React.FC<IProps> = ({ activityType, activityTime, activityTimeStamps, setActivityTimeStamps }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  let walkTimeSeconds = activityTime * 60;\n  const [isActive, setIsActive] = useState(true);\n  const isWalk = activityType === ActivityType.Walk ? true : false;\n  \n  useInterval(() => {\n    const activeWalkTime = calculateActivityTime([\n      ...activityTimeStamps, \n      ...(activityTimeStamps.length % 2 === 0 ? [] : [Date.now()])\n    ]);\n    setTimeElapsed(activeWalkTime);\n  }, 1000);\n\n  const toggle = (): void => {\n    setIsActive(!isActive);\n    setActivityTimeStamps((x: number[]) => [...x, Date.now()])\n  }\n  \n  return (\n    <>\n      <CountDownDawg>\n        {isWalk ? formatTimeLeft(walkTimeSeconds - timeElapsed) : formatTimeLeft(walkTimeSeconds )}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        {isActive ? (\n        <PauseWalk fill={colors.orange} handleClick={toggle} />\n        ) : (\n          <ResumeWalk fill={colors.darkgreen} handleClick={toggle} />\n        )}\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DawgBone = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneActivity: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DawgBone color={fill}>\n    Done!\n  </DawgBone>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport { DoneActivity } from '../../assets/svg/Done';\nimport { RehabDawg } from '../../assets/svg/Dawg';\nimport { DoneButton, Logo, LogoWrapper, DawgContainer } from '../../components/SharedStyles';\nimport { colors } from '../../utils/constants';\nimport { ActivityType, IWalk, WalkName } from '../../utils/types';\nimport { calculateActivityTime, sessionTime } from '../../utils/timeCalculation';\nimport { GradeMap } from '../../utils/constants';\n\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IWalk[]>) => void\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void\n  activityTimeStamps: number[]\n}\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory, activityTimeStamps, setActivityTimeStamps }) => {\n  const { grade } = useParams();\n  const walkTime = sessionTime(grade);\n  const handleClickOnDone = (): void => {\n    let doneTime = Date.now()\n    const activeWalkTime = calculateActivityTime([...activityTimeStamps, doneTime])\n    const setWalkTime = walkTime * 60;\n    let tempTimeStamps = activityTimeStamps.slice();\n    // this is not ideal because we are overriting the history. But maybe thats ok?\n    if(activeWalkTime > setWalkTime) {\n      tempTimeStamps = [tempTimeStamps[0], new Date(tempTimeStamps[0]).setSeconds(setWalkTime)]\n    } else {\n      tempTimeStamps = [...tempTimeStamps, doneTime]\n    }\n    let currentWalk: IWalk = {\n      walk: grade,\n      activityTimeStamps: tempTimeStamps\n    }\n    setWalkHistory((history: IWalk[]): IWalk[] => [...history, currentWalk]);\n  };\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session\n            <DawgContainer>\n              <RehabDawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <Timer activityType={ActivityType.Walk} activityTime={walkTime} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps} />\n        <DoneButton to=\"/progress\" onClick={handleClickOnDone}>\n          <DoneActivity fill={colors.white} />\n            Done\n          {/* <DoneActivity fill={white} /> */}\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useParams } from 'react-router-dom';\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport { colors } from '../../utils/constants';\nimport { ICavaletti, ActivityType } from '../../utils/types';\nimport {Logo, LogoWrapper, DawgContainer, DoneButton } from '../../components/SharedStyles';\nimport { DoneActivity } from '../../assets/svg/Done';\nimport { RehabFigure8Dawg } from '../../assets/svg/Dawg';\nimport { sessionTime } from '../../utils/timeCalculation';\n\ninterface IProps {\n  setCavalettiHistory: ICavaletti[];\n  activityTimeStamps: number[];\n  setActivityTimeStamps: (cavalettiTimeStamp: React.Dispatch<number[]> | number[]) => void;\n}\nexport const Caveletti: React.FC<IProps> = ({ setCavalettiHistory, setActivityTimeStamps, activityTimeStamps}) => {\n    const { grade } = useParams();\n    console.log('grade', grade)\n    const activityTime = sessionTime(grade);\n    const handleClickOnDone = (): void => { console.log('hi')}\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti Session\n            <DawgContainer>\n              <RehabFigure8Dawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        {/* Free timer <Timer activityTime={activityTime} /> */}\n        <Timer activityType={ActivityType.Cavaletti} activityTime={1} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps} />\n        <DoneButton to=\"/home\" onClick={handleClickOnDone}>\n          <DoneActivity fill={colors.white} />\n          Done\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\n\nimport { IDisplayGraphDataPoint } from '../utils/types';\n\ninterface IRendererProps {\n  graphDataPts: IDisplayGraphDataPoint[]\n}\n\nexport const ResponsiveDawgActivityRenderer: React.FC<IRendererProps> = ({ graphDataPts }) => {\n  return <ResponsiveBar\n      data={graphDataPts}\n      keys={['short', 'medium', 'long']}\n      indexBy=\"date\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n      padding={0.3}\n      colors={{ scheme: 'category10' }}\n      defs={[\n          {\n              id: 'dots',\n              type: 'patternDots',\n              background: 'inherit',\n              color: '#38bcb2',\n              size: 4,\n              padding: 1,\n              stagger: true\n          },\n          {\n              id: 'lines',\n              type: 'patternLines',\n              background: 'inherit',\n              color: '#eed312',\n              rotation: -45,\n              lineWidth: 6,\n              spacing: 10\n          }\n      ]}\n      fill={[\n          {\n              match: {\n                  id: 'short'\n              },\n              id: 'dots'\n          },\n          {\n              match: {\n                  id: 'medium'\n              },\n              id: 'lines'\n          }\n      ]}\n      borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Date',\n          legendPosition: 'end',\n          legendOffset: 32\n      }}\n      axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Minutes',\n          legendPosition: 'end',\n          legendOffset: -40\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n      legends={[\n          {\n              dataFrom: 'keys',\n              anchor: 'bottom-right',\n              direction: 'column',\n              justify: false,\n              translateX: 120,\n              translateY: 0,\n              itemsSpacing: 2,\n              itemWidth: 100,\n              itemHeight: 20,\n              itemDirection: 'left-to-right',\n              itemOpacity: 0.85,\n              symbolSize: 20,\n              effects: [\n                  {\n                      on: 'hover',\n                      style: {\n                          itemOpacity: 1\n                      }\n                  }\n              ]\n          }\n      ]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n  />\n    }","import React from 'react';\n\nimport { IWalk, WalkName, IDisplayGraphDataPoint } from '../utils/types';\nimport { calculateActivityTime } from '../utils/timeCalculation';\nimport { ResponsiveDawgActivityRenderer } from './ResponsiveDawgActivityRenderer';\n\ninterface IProps {\n    walkHistory: IWalk[];\n  }\n\nconst walkLength = (walkName: WalkName): string => {\n    const walkMap = {\n        'green': 'short',\n        'blue': 'medium',\n        'red': 'long',\n    }   \n    return walkMap[walkName];\n}\n\nconst getDay = (datetime: number): string => {\n    return new Date(datetime).toLocaleDateString('en-EN');\n}\n\nconst groupByDate = (walks: IWalk[]): { [key: string]: IGraphDataPoint }  => {\n    const data =  walks.reduce((accum: { [key: string]: IGraphDataPoint }, walk: IWalk): { [key: string]: IGraphDataPoint } => {\n        const actTime: number = Math.ceil(calculateActivityTime(walk.activityTimeStamps) / 60);\n        const length = walkLength(walk.walk)\n        const computedDateIndex: string = getDay(walk.activityTimeStamps[0]);\n        const existingGraphData = accum[computedDateIndex];\n        \n        let graphDataPt: IGraphDataPoint\n        if(existingGraphData) {\n          graphDataPt = {\n            ...existingGraphData,\n            short: length === 'short'? actTime + existingGraphData.short : existingGraphData.short,\n            medium: length === 'medium'? actTime + existingGraphData.medium : existingGraphData.medium,\n            long: length === 'long'? actTime + existingGraphData.long : existingGraphData.long\n          }\n        } else {\n            graphDataPt = {\n              date: new Date(walk.activityTimeStamps[0]),\n              short: length === 'short'? actTime : 0,\n              medium: length === 'medium'? actTime : 0,\n              long: length === 'long'? actTime : 0,\n          }\n        }\n        return { \n          ...accum, \n          [computedDateIndex]: graphDataPt\n        };\n    }, {})\n    return data;\n}\n\ninterface IGraphDataPoint {\n    date: Date;\n    short: number;\n    medium: number;\n    long: number; \n}\n\n\n\n// const data: IDisplayGraphDataPoint[] = [\n//     {\n//         \"date\": \"Monday\",\n//         \"short\": 100,\n//         \"medium\": 0,\n//         \"long\": 10,\n//     },\n//     {\n//         \"date\": \"Tuesday\",\n//         \"short\": 100,\n//         \"medium\": 50,\n//         \"long\": 0\n//     },\n// ]\n// const data2 = [\n//     {\n//       \"country\": \"AD\",\n//       \"hot dog\": 27,\n//       \"hot dogColor\": \"hsl(31, 70%, 50%)\",\n//       \"burger\": 144,\n//       \"burgerColor\": \"hsl(208, 70%, 50%)\",\n//       \"sandwich\": 129,\n//       \"sandwichColor\": \"hsl(329, 70%, 50%)\",\n//       \"kebab\": 174,\n//       \"kebabColor\": \"hsl(318, 70%, 50%)\",\n//       \"fries\": 110,\n//       \"friesColor\": \"hsl(176, 70%, 50%)\",\n//       \"donut\": 182,\n//       \"donutColor\": \"hsl(37, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AE\",\n//       \"hot dog\": 192,\n//       \"hot dogColor\": \"hsl(136, 70%, 50%)\",\n//       \"burger\": 2,\n//       \"burgerColor\": \"hsl(257, 70%, 50%)\",\n//       \"sandwich\": 153,\n//       \"sandwichColor\": \"hsl(312, 70%, 50%)\",\n//       \"kebab\": 17,\n//       \"kebabColor\": \"hsl(53, 70%, 50%)\",\n//       \"fries\": 11,\n//       \"friesColor\": \"hsl(251, 70%, 50%)\",\n//       \"donut\": 32,\n//       \"donutColor\": \"hsl(198, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AF\",\n//       \"hot dog\": 191,\n//       \"hot dogColor\": \"hsl(35, 70%, 50%)\",\n//       \"burger\": 166,\n//       \"burgerColor\": \"hsl(5, 70%, 50%)\",\n//       \"sandwich\": 53,\n//       \"sandwichColor\": \"hsl(91, 70%, 50%)\",\n//       \"kebab\": 117,\n//       \"kebabColor\": \"hsl(246, 70%, 50%)\",\n//       \"fries\": 33,\n//       \"friesColor\": \"hsl(224, 70%, 50%)\",\n//       \"donut\": 77,\n//       \"donutColor\": \"hsl(145, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AG\",\n//       \"hot dog\": 150,\n//       \"hot dogColor\": \"hsl(163, 70%, 50%)\",\n//       \"burger\": 104,\n//       \"burgerColor\": \"hsl(229, 70%, 50%)\",\n//       \"sandwich\": 64,\n//       \"sandwichColor\": \"hsl(270, 70%, 50%)\",\n//       \"kebab\": 60,\n//       \"kebabColor\": \"hsl(223, 70%, 50%)\",\n//       \"fries\": 29,\n//       \"friesColor\": \"hsl(76, 70%, 50%)\",\n//       \"donut\": 21,\n//       \"donutColor\": \"hsl(283, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AI\",\n//       \"hot dog\": 99,\n//       \"hot dogColor\": \"hsl(312, 70%, 50%)\",\n//       \"burger\": 149,\n//       \"burgerColor\": \"hsl(192, 70%, 50%)\",\n//       \"sandwich\": 8,\n//       \"sandwichColor\": \"hsl(287, 70%, 50%)\",\n//       \"kebab\": 179,\n//       \"kebabColor\": \"hsl(92, 70%, 50%)\",\n//       \"fries\": 13,\n//       \"friesColor\": \"hsl(284, 70%, 50%)\",\n//       \"donut\": 11,\n//       \"donutColor\": \"hsl(171, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AL\",\n//       \"hot dog\": 43,\n//       \"hot dogColor\": \"hsl(287, 70%, 50%)\",\n//       \"burger\": 33,\n//       \"burgerColor\": \"hsl(62, 70%, 50%)\",\n//       \"sandwich\": 109,\n//       \"sandwichColor\": \"hsl(185, 70%, 50%)\",\n//       \"kebab\": 162,\n//       \"kebabColor\": \"hsl(152, 70%, 50%)\",\n//       \"fries\": 47,\n//       \"friesColor\": \"hsl(33, 70%, 50%)\",\n//       \"donut\": 79,\n//       \"donutColor\": \"hsl(68, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AM\",\n//       \"hot dog\": 74,\n//       \"hot dogColor\": \"hsl(48, 70%, 50%)\",\n//       \"burger\": 150,\n//       \"burgerColor\": \"hsl(191, 70%, 50%)\",\n//       \"sandwich\": 16,\n//       \"sandwichColor\": \"hsl(106, 70%, 50%)\",\n//       \"kebab\": 18,\n//       \"kebabColor\": \"hsl(117, 70%, 50%)\",\n//       \"fries\": 120,\n//       \"friesColor\": \"hsl(301, 70%, 50%)\",\n//       \"donut\": 149,\n//       \"donutColor\": \"hsl(149, 70%, 50%)\"\n//     }\n//   ]\n\n\nexport const DawgResponsiveBar: React.FC<IProps> = ( { walkHistory } ) => {\n  const graphData = groupByDate(walkHistory);\n  const graphDataPts:IDisplayGraphDataPoint[] = Object.entries(graphData).map(\n    ([key, value]) => {\n      return {date: key, short: value.short, medium: value.medium, long: value.long}\n    }\n  );\n  if(graphDataPts.length > 0) {\n    return <ResponsiveDawgActivityRenderer graphDataPts={graphDataPts}/>\n  }\n    return null // vs <></> both are ok\n  }\nexport default DawgResponsiveBar;","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { colors } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${colors.silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${colors.blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${colors.blue};\n`;\n\ninterface IProps {\n  totalActivityTime: number\n}\n\nexport const ProgressNotification: React.FC<IProps> = ({ totalActivityTime }) => {\n  const formatActivityTime = moment(totalActivityTime).format('mm:ss');\n    if(totalActivityTime > 0) {\n    return (\n      <NotificationContainer>\n        <NotificationText>Total Activity Time \n          <StrongSpan> {formatActivityTime}</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n\n  return (\n    <NotificationContainer>\n      <NotificationText>View your Dawg's activity feed here!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default ProgressNotification;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../../components/Page';\nimport { DawgResponsiveBar } from '../../components/DawgResponsiveBar';\nimport { DawgWalks } from '../../components/DawgWalks';\nimport { Pagination } from '../../components/Pagination';\nimport { ProgressNotification } from '../../components/ProgressNotification';\nimport { IWalk } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { colors } from '../../utils/constants';\nimport { calculateWeeklyActivityTime } from '../../utils/timeCalculation';\n\nconst ReportContainer = styled.div`\n  padding: 1\n  border: 3px solid ${colors.red};\n  height: 350px;\n  width: 75%;\n  alignment-baseline: baseline\n`;\n\ninterface IProps {\n  walkHistory: IWalk[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory }) => {\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1);\n  const [walksPerPage, setWalksPerPage] = useState(5);\n\n  // Get current walks\n  const indexOfLastWalk = currentPage * walksPerPage;\n  const indexOfFirstWalk = indexOfLastWalk - walksPerPage;\n  const currentWalks = walkHistory.slice(indexOfFirstWalk, indexOfLastWalk);\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n  const totalActivityTime = calculateWeeklyActivityTime(walkHistory) * 1000;\n\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <ProgressNotification totalActivityTime={totalActivityTime}/>\n          {/* <DawgWalks walks={currentWalks} loading={loading}/>\n          <Pagination\n            walksPerPage={walksPerPage}\n            totalWalks={walkHistory.length}\n            paginate={paginate} /> */}\n\n        <DawgResponsiveBar walkHistory={walkHistory}/>   \n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T, resetLocalStorage: boolean = false) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return !item || resetLocalStorage ? initialValue : JSON.parse(item);\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  // local storage is automatically set when state is updated.\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk, ICavaletti } from '../utils/types';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IWalk[]>('walkHistory', []); \n  // const [ cavalettiHistory, setCavalettiHistory ] = useLocalStorage<ICavaletti[]>('cavalettiHistory', []); \n  // const [ cavalettiTimeStamps, setCavalettiStamps ] = useLocalStorage<number[]>('cavalettiTimeStamps', []); \n  const [ activityTimeStamps, setActivityTimeStamps ] = useLocalStorage<number[]>('activityTimeStamps', []); \n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setActivityTimeStamps={setActivityTimeStamps} activityTimeStamps={activityTimeStamps} />\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setActivityTimeStamps={setActivityTimeStamps} activityTimeStamps={activityTimeStamps} />} />\n        <Route path=\"/walks/:grade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps}/>\n\n        </Route>\n        {/* Below is a different style of adding a route */}\n        <Route path=\"/cavaletti/:grade/\" exact component={Caveletti} setActivityTimeStamps={setActivityTimeStamps} /> \n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory} />\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { colors, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${colors.white};\n  // padding: 5px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${colors.white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  // font-size: 12px;\n  padding: 5px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={colors.blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={colors.blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}