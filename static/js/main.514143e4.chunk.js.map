{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","hooks/useLocalStorage.ts","hooks/useIsClient.ts","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","components/Timer.tsx","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","pages/ProgressReport/ProgressReport.tsx","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blue","red","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","Svg","svg","ColouredSquare","fill","role","width","height","x","y","ColouredPaw","Dawg","GuideDog","RehabDawg","useLocalStorage","key","initialValue","isClient","useState","setClient","useEffect","useIsClient","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","history","lastWalk","length","finishDateTime","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","WalkContainer","CavalettiContainer","HomePage","setStartDateTime","handleClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","href","PauseDawg","Pause","PauseWalk","formatTimeLeft","difference","timeLeftMap","Math","floor","formatTime","pad","input","toString","padStart","CountDownDawg","PauseResumeContainer","Timer","walkTime","startTime","walkTimeSeconds","timeElapsed","setTimeElapsed","timer","setTimeout","round","clearTimeout","alert","DoneDawg","Bone","DoneWalk","DoneButton","walkMap","ActiveWalk","setWalkHistory","timeLeft","startDateTime","walkGrade","useParams","currentWalk","walkName","Caveletti","ReportContainer","ReportItemText","ProgressReport","walkHistory","walkItems","map","walk","dateTime","noWalks","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.514143e4.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 48;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\n// background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n// height: calc(100vh - 50px);\n// display: flex;\n// flex-direction: column;\n// justify-content: space-around;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  purple,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || purple};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import { useState } from 'react';\nimport useIsClient from './useIsClient';\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // Prevent build error \"window is undefined\" but keep keep working\n  const isClient = useIsClient();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage then\n    // parse stored json or return initialValue\n    // console.log('isClient ==> ', isClient)\n    // if (!isClient) {\n    //   return initialValue;\n    // }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (isClient) {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}","import { useEffect, useState } from 'react';\n\nexport default function useIsClient() {\n  const [isClient, setClient] = useState(false);\n  useEffect(() => {\n    setClient(true);\n  }, []);\n  return isClient;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\nimport { IWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\nexport const Notification: React.FC = () => {\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const lastWalk = history[history.length - 1];\n  if (lastWalk?.finishDateTime) {\n    const formatLastWalkTime = moment(history.finishDateTime).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  // console.log('Walks', history);\n  return (\n    <NotificationContainer>\n      <NotificationText>Start logging those Rehab Walks!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo } from '../components/SharedStyles';\nimport { ColouredPaw, ColouredSquare } from '../assets/svg/ColouredShapes';\nimport { green, red, blue, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { IWalk } from '../utils/types';\n// import useLocalStorage from '../hooks/useLocalStorage';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\npadding: 0 ${gutterWidth}px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${blue};\nflex-direction: row\n`\n\nconst WalkContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\nconst CavalettiContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  // setStartDateTime: (aw: number) => void\n  setStartDateTime: (start: number) => void\n};\n\nexport const HomePage: React.FC<IProps> = ({ setStartDateTime }) => {\n  // const [ startDateTime, setStartDateTime ] = useLocalStorage<number>('startDateTime', 0); \n  const handleClick = () => setStartDateTime(Date.now());\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg <br />\n            <RehabDawg fill={green}/>\n            <RehabDawg fill={blue}/>\n            <RehabDawg fill={red}/>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <WalkContainer>\n            <StartButton to=\"/walks/green\" onClick={handleClick}>\n              <ColouredPaw fill={green} />\n              5 mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleClick}>\n              <ColouredPaw fill={blue} />\n              10 mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleClick}>\n              <ColouredPaw fill={red}/>\n              15 mins\n            </StartButton>\n          </WalkContainer>\n          <HeadingContainer>\n            Cavaletti\n          </HeadingContainer>\n          <CavalettiContainer>\n          <StartButton to=\"/cavaletti/green\" onClick={handleClick}>\n              <ColouredSquare fill={red}/>\n              15 mins\n            </StartButton>\n          </CavalettiContainer>\n        </RehabActivityContainer>\n        <Notification />\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n  margin-left: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","interface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  console.log('---> difference', difference);\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    console.log('---> difference', difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {timeLeftInMilliseconds, formatTimeLeft} from '../utils/timeFormatter';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  startTime: number;\n  walkTime: number;\n}\n\nexport const Timer: React.FC<IProps> = ({ walkTime, startTime }) => {\n  const walkTimeSeconds = walkTime * 60;\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const now = Date.now();\n      setTimeElapsed(() => Math.round((now - startTime)/1000));\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n  console.log(' ===> startTime', startTime)\n  console.log(' ===> timeElapsed', timeElapsed)\n  console.log(' ===> walkTimeSeconds', walkTimeSeconds)\n  return (\n    <>\n      <CountDownDawg>\n        {formatTimeLeft(walkTimeSeconds - timeElapsed)}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        <PauseWalk fill={orange} handleClick={() => alert('Pausing!')}/>\n        <ResumeWalk fill={darkgreen} handleClick={() => alert('Resuming')}/>\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper} from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { formatTimeLeft } from '../../utils/timeFormatter';\nimport useLocalStorage from '../../hooks/useLocalStorage';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\nconst walkMap = {\n  'green': 5,\n  'blue': 10,\n  'red': 15\n};\n\nconst sessionTime = (walkName: WalkName): number => {\n  return walkMap[walkName];\n};\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IWalk[]>) => void\n}\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory }) => {\n  // const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const [ timeLeft, setTimeLeft ] = useLocalStorage<number>('timeLeft', 0); \n  const [ startDateTime, setStartDateTime ] = useLocalStorage<number>('startDateTime', Date.now()); \n  // const [ activeWalk, setActiveWalk ] = useLocalStorage<IActiveWalk | undefined>('activeWalk', undefined); \n  const { walkGrade } = useParams();\n  const walkTime = sessionTime(walkGrade);\n  // setTimeLeft(walkTime); ==> HERE!!\n  const handleClick = () => {\n    const finishDateTime = Date.now();\n    const walkingRehabTime = (timeLeft === 0)? walkTime : finishDateTime - startDateTime\n    let currentWalk: IWalk = {\n      walkName: walkGrade,\n      startDateTime: startDateTime,\n      walkTime: walkingRehabTime,\n      finishDateTime: finishDateTime\n    }\n    return setWalkHistory((history: IWalk[]): IWalk[] => [...history, currentWalk]);\n  };\n  \n  console.log(' ===> walkGrade', walkGrade)\n  console.log(' ===> walkTime', walkTime)\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session <br />\n            <RehabDawg fill={walkGrade}/>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} startTime={startDateTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper} from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { formatTimeLeft } from '../../utils/timeFormatter';\nimport useLocalStorage from '../../hooks/useLocalStorage';;\n\nexport const Caveletti: React.FC = () => {\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti <br />\n          </Logo>\n        </LogoWrapper>\n        {/* <Timer walkTime={walkTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton> */}\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n// import InfiniteScroll from 'react-infinite-scroller';\n\nimport { Page } from '../../components/Page';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { blue, lightblue } from '../../utils/constants';\n\n\nconst ReportContainer = styled.div`\n  // background-image: linear-gradient(to bottom right, ${blue}, ${'lightblue'}); \n  min-height: 100vh;\n  padding: 0 12px 62px 12px\n`;\n\nconst WalkContainer = styled.div`\n  border: 2px solid ${blue};\n  border-radius: 5px;\n  padding: 6px;\n  margin: 0 12px;\n  background-color: rgba( 256, 256, 256, 0.1 );\n  margin-bottom 62px; \n`;\n\nconst ReportItemText = styled.div`\n    color: ${blue};\n    font-size: 12px;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n`;\n\nconst walkGrade = (walkName: WalkName): string => {\n  const grade = {\n    'green': 'short',\n    'blue': 'medium',\n    'red': 'long'\n  }\n  return grade[walkName];\n}\n\ninterface IProps {\n  walkHistory: IWalk[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory }) => {\n  console.log('===> history', walkHistory);\n  const walkItems = walkHistory.map((walk: IWalk) => {\n    const dateTime = moment(walk.startDateTime).format('MMM Do YYYY, h:mm a')\n    const walkTime = moment(walk.walkTime).format('mm:ss')\n    const walkName = walkGrade(walk.walkName as WalkName);\n    return (\n\n      <WalkContainer key={walk.startDateTime}>\n        <ReportItemText><StrongSpan>{dateTime}</StrongSpan></ReportItemText>\n        <ReportItemText><StrongSpan>Total time: </StrongSpan>{walkTime}</ReportItemText>\n        <ReportItemText><StrongSpan>Walk grade: </StrongSpan>{walkName}</ReportItemText>\n      </WalkContainer>\n\n    )\n    // return (\n    //   <ListContainer scrollable={false}>\n    //     <InfiniteList scrollContainer={'window'} walks={history} />\n    //   </ListContainer>\n    // );\n\n  })\n\n  const noWalks = <WalkContainer><ReportItemText>Welcome, record your Dawgs Rehab history!</ReportItemText></WalkContainer>\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <WalkContainer>\n            {/* <InfiniteScroll\n              pageStart={0}\n              loadMore={walkItems}\n              hasMore={true || false}\n              loader={<div className=\"loader\" key={0}>Loading ...</div>}> \n              {history.length ? walkItems : noWalks}\n            </InfiniteScroll>                                  */}\n            {walkHistory.length ? walkItems : noWalks}\n          </WalkContainer>\n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk } from '../utils/types';\nimport { IActiveWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IWalk[]>('walkHistory', []); \n  const [ startDateTime, setStartDateTime ] = useLocalStorage('startDateTime', 0); \n  // const [ walkTimeStamps, setWalkTimeStamps ] = useLocalStorage('walkTimeStamps', []); \n  // console.log('==> AW:', startDateTime);\n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setStartDateTime={setStartDateTime} />\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setStartDateTime={setStartDateTime} />} />\n        <Route path=\"/walks/:walkGrade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} />\n\n        </Route>\n        <Route path=\"/cavaletti/:walkGrade/\" exact component={Caveletti} setWalkHistory={setWalkHistory}/>\n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory}/>\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { white, blue, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 12px;\n  padding: 14px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}