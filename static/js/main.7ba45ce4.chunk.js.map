{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/types.ts","utils/timeFormatter.ts","utils/timeCalculation.ts","components/Timer.tsx","hooks/useInterval.ts","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","components/ResponsiveDawgActivityRenderer.tsx","components/DawgResponsiveGraph.tsx","components/ProgressNotification.tsx","pages/ProgressReport/ProgressReport.tsx","hooks/useLocalStorage.ts","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","green","blue","purple","orange","red","bronze","gold","black","silver","white","lightblue","darkgreen","getColor","fill","GradeMap","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","DawgContainer","ButtonBaseWithLink","Link","props","color","background","DoneButton","DawgPaw","Paw","DawgHat","HatCowboy","ColouredPaw","svg","ColouredHat","Dawg","GuideDog","Figure8Dawg","InfinityOutline","RehabDawg","RehabFigure8Dawg","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","activityTimeStamps","length","lastWalkTimeStamp","slice","shift","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","ActivityContainer","HomePage","setActivityTimeStamps","handleStartActivityButtonClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","handleClick","href","ActivityType","PauseDawg","Pause","PauseWalk","formatTime","difference","Math","floor","pad","input","toString","padStart","calculateWeeklyActivityTime","activity","reduce","accum","a","calculateActivityTime","result","i","round","CountDownDawg","PauseResumeContainer","Timer","activityType","activityTime","useState","timeElapsed","setTimeElapsed","walkTimeSeconds","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","activeWalkTime","toggle","x","Walk","timeLeftMap","formatTimeLeft","formatTimeLeftCountUp","DawgBone","Bone","DoneActivity","ActiveWalk","setWalkHistory","grade","useParams","walkTime","doneTime","setWalkTime","tempTimeStamps","setSeconds","currentWalk","name","history","Caveletti","setCavalettiHistory","Cavaletti","currentActivity","ChartContainer","ChartTitle","ResponsiveDawgActivityRenderer","graphDataPts","chartTitle","chartKeys","data","keys","indexBy","margin","top","right","bottom","left","padding","scheme","defs","type","size","stagger","rotation","lineWidth","spacing","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","animate","motionStiffness","motionDamping","groupedActivity","activities","datetime","graphDataPt","ceil","activityName","activityLength","computedDateIndex","toLocaleDateString","existingGraphData","isWalkActivity","short","medium","long","date","walkGraphDataPts","rookie","hotdawg","prodawg","cavallettiGraphDataPts","activityGroupedByDate","createGraphDataPoints","entries","Object","undefined","isWalkGraphDataPoint","map","key","value","DawgResponsiveGraph","walkHistory","cavalettiHistory","cavalettiGraphDataPts","ProgressNotification","totalWalkActivityTime","totalCavelettiActivityTime","formatWalkActivityTime","formatCavalettiActivityTime","ReportContainer","ProgressReport","totalCavelettieActivityTime","useLocalStorage","initialValue","resetLocalStorage","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setItem","stringify","MaxWidthContainer","Routes","location","useLocation","path","exact","render","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7ba45ce4.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 36;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\n// export const green = '#02d386';\n// export const blue = '#198FE3';\n// export const purple = '#6702ff';\n// export const orange = '#f79729';\n// export const red = '#ff0000';\n// export const bronze = '#cd7f32';\n// export const gold = '#ffd700';\n// export const black = '#000000';\n// export const silver = '#C0C0C0';\n// export const white = '#ffffff';\n// export const lightblue = '#0277bd';\n// export const darkgreen = '#006400';\n\ntype Colors = {\n  [key: string]: string\n}\n\nexport const colors: Colors = {\n  green: '#02d386',\n  blue: '#198FE3',\n  purple: '#6702ff',\n  orange: '#f79729',\n  red: '#ff0000',\n  bronze: '#cd7f32',\n  gold: '#ffd700',\n  black: '#000000',\n  silver: '#C0C0C0',\n  white: '#ffffff',\n  lightblue: '#0277bd',\n  darkgreen: '#006400',\n}\n\nexport const getColor = ( fill: string): string => {\n  return colors[fill];\n}\n\nexport const GradeMap = {\n  green: 5,\n  blue: 10,\n  red: 15,\n  bronze: 5,\n  silver: 10,\n  gold: 15\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  colors,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\n\nexport const DawgContainer = styled.div`\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n  ${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || colors.blue};\n`;\n\nexport const DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\nimport { HatCowboy } from '@styled-icons/fa-solid/HatCowboy';\n\nconst DawgPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst DawgHat = styled(HatCowboy)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DawgPaw color={fill} />\n);\n\nexport const ColouredHat: React.FC<IProps> = ( { fill = 'black'}) => (\n  <DawgHat color={fill} />\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\nimport { InfinityOutline }  from '@styled-icons/typicons/InfinityOutline'\nimport { getColor } from '../../utils/constants'\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\nconst Figure8Dawg = styled(InfinityOutline)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);\n\nexport const RehabFigure8Dawg: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Figure8Dawg color={getColor(fill)} />\n);","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { colors } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${colors.silver};\n    border-radius: 5px;\n    padding: 15px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${colors.blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${colors.blue};\n`;\n\ninterface IProps {\n  activityTimeStamps: number[] \n}\n\nexport const Notification: React.FC<IProps> = ({ activityTimeStamps }) => {\n  if (activityTimeStamps.length) {\n    const lastWalkTimeStamp = activityTimeStamps.slice(activityTimeStamps.length - 1).shift();\n    const formatLastWalkTime = moment(lastWalkTimeStamp).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  return (\n    <NotificationContainer>\n      <NotificationText>Start the pooch on their Rehab Journey to see progress!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo, DawgContainer } from '../components/SharedStyles';\nimport { ColouredPaw, ColouredHat } from '../assets/svg/ColouredShapes';\nimport { colors, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { GradeMap } from '../utils/constants';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: left;\njustify-content: space-around;\nborder: 0px solid ${colors.red};\nmargin: 0px 0 20px;\npadding: 0px ${gutterWidth}px 40px 0px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${colors.blue};\nflex-direction: row\n`\n\nconst ActivityContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  activityTimeStamps: number[];\n};\n\nexport const HomePage: React.FC<IProps> = ({ setActivityTimeStamps, activityTimeStamps }) => {\n  const handleStartActivityButtonClick = () => setActivityTimeStamps([Date.now()]);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg\n            <DawgContainer>\n              <RehabDawg fill={colors.green}/>\n              <RehabDawg fill={colors.blue}/>\n              <RehabDawg fill={colors.red}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <ActivityContainer>\n            <StartButton to=\"/walks/green\" onClick={handleStartActivityButtonClick}>\n              <ColouredPaw fill={colors.green} />\n                {GradeMap['green']} mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleStartActivityButtonClick}>\n              <ColouredPaw fill={colors.blue} />\n              {GradeMap['blue']} mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleStartActivityButtonClick}>\n              <ColouredPaw fill={colors.red}/>\n              {GradeMap['red']} mins\n            </StartButton>\n          </ActivityContainer>\n          <HeadingContainer>\n            Cavaletti\n          </HeadingContainer>\n          <ActivityContainer>\n          <StartButton to=\"/cavaletti/bronze\" onClick={handleStartActivityButtonClick}>\n              <ColouredHat fill={colors.bronze}/>\n              Rookie\n            </StartButton>\n            <StartButton to=\"/cavaletti/silver\" onClick={handleStartActivityButtonClick}>\n              <ColouredHat fill={colors.silver}/>\n              Hot Dawg\n            </StartButton>\n            <StartButton to=\"/cavaletti/gold\" onClick={handleStartActivityButtonClick}>\n              <ColouredHat fill={colors.gold}/>\n              Pro Dawg\n            </StartButton>\n          </ActivityContainer>\n        </RehabActivityContainer>\n        <Notification activityTimeStamps={activityTimeStamps}/>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","export interface Dictionary<T> {\n  [key: string]: T;\n}\nexport interface IActivity {\n  activityTimeStamps: number[];\n  activityType: ActivityType\n  name: WalkName | TrickGrade\n}\n\nexport enum ActivityType {\n  Walk,\n  Cavaletti\n}\nexport interface IWalkDisplayGraphDataPoint {\n  date: string;\n  short: number;\n  medium: number;\n  long: number; \n}\n\nexport interface ICavalettiDisplayGraphDataPoint {\n  date: string;\n  rookie: number;\n  hotdawg: number;\n  prodawg: number;\n}\n\nexport type WalkName = 'green' | 'blue' | 'red'\nexport type TrickGrade = 'bronze' | 'silver' | 'gold'\n// export type TrickGrade = 'rookie (basic poles)' | 'cowdawg (figure of 8s)' | 'hotdawg (comp ready)'\nexport interface State {\n  walkHistory: IActivity[];\n}\n\n","import { Dictionary } from './types';\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nexport const formatTimeLeftCountUp = (difference: number): Dictionary<number> | string => {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import { IActivity, WalkName, TrickGrade} from './types'\nimport { GradeMap } from './constants';\n\nexport const sessionTime = (activityName: WalkName | TrickGrade ): number => {\n  return GradeMap[activityName];\n};\n\n/** \n * The return time is in seconds\n*/\nexport const calculateWeeklyActivityTime = (activity: IActivity[]): number => {\n  let result = 0;\n  result = activity.reduce((accum: number, a: IActivity) => {\n    return accum = accum + calculateActivityTime(a.activityTimeStamps);\n  }, 0);\n  return result;\n}\n\n/** \n * The return time is in seconds\n */\nexport const calculateActivityTime = (activityTimeStamps: number[]): number => {\n  let result = 0;\n  for (let i = 0; i < activityTimeStamps.length - 1; i += 2) {\n    const timeDiff = (activityTimeStamps[i+1] - activityTimeStamps[i]);\n    result += timeDiff;\n  }\n  return Math.round(result / 1000);\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useInterval } from '../hooks/useInterval';\nimport { ResumeWalk } from '../assets/svg/Resume';\nimport { PauseWalk } from '../assets/svg/Pause';\nimport { formatTimeLeft, formatTimeLeftCountUp } from '../utils/timeFormatter';\nimport { calculateActivityTime } from '../utils/timeCalculation';\nimport { colors } from '../utils/constants';\nimport { ActivityType } from '../utils/types';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  activityTimeStamps: number[];\n  activityTime: number;\n  activityType: ActivityType;\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void;\n}\n\n// activity type could part of the Activity Type ... refactor!\nexport const Timer: React.FC<IProps> = ({ activityType, activityTime, activityTimeStamps, setActivityTimeStamps }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  let walkTimeSeconds = activityTime * 60;\n  const [isActive, setIsActive] = useState(true);\n  useInterval(() => {\n    const activeWalkTime = calculateActivityTime([\n      ...activityTimeStamps, \n      ...(activityTimeStamps.length % 2 === 0 ? [] : [Date.now()])\n    ]);\n    setTimeElapsed(activeWalkTime);\n  }, 1000);\n\n  const toggle = (): void => {\n    setIsActive(!isActive);\n    setActivityTimeStamps((x: number[]) => [...x, Date.now()])\n  }\n  \n  return (\n    <>\n      <CountDownDawg>\n        {activityType === ActivityType.Walk ?\n          formatTimeLeft(walkTimeSeconds - timeElapsed) : \n          formatTimeLeftCountUp(walkTimeSeconds + timeElapsed)\n        }\n      </CountDownDawg>\n      <PauseResumeContainer>\n        {isActive ? (\n          <PauseWalk fill={colors.orange} handleClick={toggle} />\n        ) : (\n          <ResumeWalk fill={colors.darkgreen} handleClick={toggle} />\n        )}\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DawgBone = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneActivity: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DawgBone color={fill}>\n    Done!\n  </DawgBone>\n);","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport { DoneActivity } from '../../assets/svg/Done';\nimport { RehabDawg } from '../../assets/svg/Dawg';\nimport { DoneButton, Logo, LogoWrapper, DawgContainer } from '../../components/SharedStyles';\nimport { colors } from '../../utils/constants';\nimport { ActivityType, IActivity } from '../../utils/types';\nimport { calculateActivityTime, sessionTime } from '../../utils/timeCalculation';\n\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IActivity[]>) => void\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void\n  activityTimeStamps: number[]\n}\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory, activityTimeStamps, setActivityTimeStamps }) => {\n  const { grade } = useParams();\n  const walkTime = sessionTime(grade);\n  const handleClickOnDone = (): void => {\n    let doneTime = Date.now()\n    const activeWalkTime = calculateActivityTime([...activityTimeStamps, doneTime])\n    const setWalkTime = walkTime * 60;\n    let tempTimeStamps = activityTimeStamps.slice();\n    // this is not ideal because we are overriting the history. But maybe thats ok?\n    if(activeWalkTime > setWalkTime) {\n      tempTimeStamps = [tempTimeStamps[0], new Date(tempTimeStamps[0]).setSeconds(setWalkTime)]\n    } else {\n      tempTimeStamps = [...tempTimeStamps, doneTime]\n    }\n    let currentWalk: IActivity = {\n      name: grade,\n      activityType: ActivityType.Walk,\n      activityTimeStamps: tempTimeStamps\n    }\n    setWalkHistory((history: IActivity[]): IActivity[] => [...history, currentWalk]);\n  };\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session\n            <DawgContainer>\n              <RehabDawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <Timer activityType={ActivityType.Walk} activityTime={walkTime} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps} />\n        <DoneButton to=\"/progress\" onClick={handleClickOnDone}>\n          <DoneActivity fill={colors.white} />\n            Done\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport { colors } from '../../utils/constants';\nimport { IActivity, ActivityType } from '../../utils/types';\nimport {Logo, LogoWrapper, DawgContainer, DoneButton } from '../../components/SharedStyles';\nimport { DoneActivity } from '../../assets/svg/Done';\nimport { RehabFigure8Dawg } from '../../assets/svg/Dawg';\n\ninterface IProps {\n  setCavalettiHistory: (activity: React.Dispatch<IActivity[]>) => void\n  setActivityTimeStamps: (activityTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  activityTimeStamps: number[];\n}\nexport const Caveletti: React.FC<IProps> = ({ setCavalettiHistory, setActivityTimeStamps, activityTimeStamps}) => {\n    const { grade } = useParams();\n    const handleClickOnDone = (): void => {\n      const currentActivity: IActivity = {\n        name: grade,\n        activityType: ActivityType.Cavaletti,\n        activityTimeStamps: [...activityTimeStamps, Date.now()]\n      }\n      setCavalettiHistory((history: IActivity[]): IActivity[] => [...history, currentActivity]);\n    };\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti Session\n            <DawgContainer>\n              <RehabFigure8Dawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <Timer activityType={ActivityType.Cavaletti} activityTime={0} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps} />\n        <DoneButton to=\"/progress\" onClick={handleClickOnDone}>\n          <DoneActivity fill={colors.white} />\n          Done\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { ResponsiveBar } from '@nivo/bar';\n\nimport { ICavalettiDisplayGraphDataPoint, IWalkDisplayGraphDataPoint } from '../utils/types';\nimport { colors } from '../utils/constants';\n\nconst ChartContainer = styled.div`\n  border: 0px solid black;\n  border-radius: 5px;\n  padding: 6px;\n  margin: 0 12px 12px;\n  background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst ChartTitle = styled.span`\n  font-weight: 700;\n  color: ${colors.black};\n`\n\ninterface IRendererProps {\n  graphDataPts: IWalkDisplayGraphDataPoint[] | ICavalettiDisplayGraphDataPoint[];\n  chartTitle: string;\n  chartKeys: string[]\n}\n\nexport const ResponsiveDawgActivityRenderer: React.FC<IRendererProps> = ({ graphDataPts, chartTitle, chartKeys }) => {\n  if(graphDataPts.length === 0) {\n    return null\n  }\n  return (<>\n        <ChartContainer>\n          <ChartTitle>{chartTitle}</ChartTitle>\n        </ChartContainer>\n        <ResponsiveBar\n          data={graphDataPts}\n          keys={chartKeys}\n          indexBy=\"date\"\n          margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n          padding={0.3}\n          colors={{ scheme: 'category10' }}\n          defs={[\n              {\n                  id: 'dots',\n                  type: 'patternDots',\n                  background: 'inherit',\n                  color: '#38bcb2',\n                  size: 4,\n                  padding: 1,\n                  stagger: true\n              },\n              {\n                  id: 'lines',\n                  type: 'patternLines',\n                  background: 'inherit',\n                  color: '#eed312',\n                  rotation: -45,\n                  lineWidth: 6,\n                  spacing: 10\n              }\n          ]}\n          fill={[\n              {\n                  match: {\n                      id: 'short'\n                  },\n                  id: 'dots'\n              },\n              {\n                  match: {\n                      id: 'medium'\n                  },\n                  id: 'lines'\n              }\n          ]}\n          borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n          axisTop={null}\n          axisRight={null}\n          axisBottom={{\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: 'Date',\n              legendPosition: 'end',\n              legendOffset: 32\n          }}\n          axisLeft={{\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: 'Minutes',\n              legendPosition: 'end',\n              legendOffset: -40\n          }}\n          labelSkipWidth={12}\n          labelSkipHeight={12}\n          labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n          legends={[\n              {\n                  dataFrom: 'keys',\n                  anchor: 'bottom-right',\n                  direction: 'column',\n                  justify: false,\n                  translateX: 120,\n                  translateY: 0,\n                  itemsSpacing: 2,\n                  itemWidth: 100,\n                  itemHeight: 20,\n                  itemDirection: 'left-to-right',\n                  itemOpacity: 0.85,\n                  symbolSize: 20,\n                  effects: [\n                      {\n                          on: 'hover',\n                          style: {\n                              itemOpacity: 1\n                          }\n                      }\n                  ]\n              }\n          ]}\n          animate={true}\n          motionStiffness={90}\n          motionDamping={15}\n      />\n      </>)\n    }","import React from 'react';\n\nimport { IActivity, WalkName, IWalkDisplayGraphDataPoint, ICavalettiDisplayGraphDataPoint, TrickGrade, ActivityType } from '../utils/types';\nimport { calculateActivityTime } from '../utils/timeCalculation';\nimport { ResponsiveDawgActivityRenderer } from './ResponsiveDawgActivityRenderer';\n\ninterface IProps {\n  walkHistory: IActivity[];\n  cavalettiHistory: IActivity[];\n}\n\ninterface IWalkGraphDataPoint {\n  date: Date;\n  short: number;\n  medium: number;\n  long: number;\n}\ninterface ICavalettiGraphDataPoint {\n  date: Date;\n  rookie: number;\n  hotdawg: number;\n  prodawg: number;\n}\n\nconst activityLength = (activityName: WalkName | TrickGrade): string => {\n  const walkMap = {\n    'green': 'short',\n    'blue': 'medium',\n    'red': 'long',\n    'bronze': 'rookie',\n    'silver': 'hotdawg',\n    'gold': 'prodawg'\n  }\n  return walkMap[activityName];\n}\n\nconst getDay = (datetime: number): string => {\n  return new Date(datetime).toLocaleDateString('en-EN');\n}\n\ntype WalkGraphDataPointDictionary = {\n  [key: string]: IWalkGraphDataPoint\n}\n\ntype CavelettiGraphDataPointDictionary = {\n  [key: string]: ICavalettiGraphDataPoint\n}\n\ntype GraphDataPointDictionary = {\n  [key: string]: IWalkGraphDataPoint | ICavalettiGraphDataPoint\n}\n\n// function activityGraphDataPts(activity: IActivity, existingGraphData: IWalkGraphDataPoint): IWalkGraphDataPoint\n// function activityGraphDataPts(activity: IActivity, existingGraphData: ICavalettiGraphDataPoint): ICavalettiGraphDataPoint\nconst walkGraphDataPts = (data: { activityTime: number, activityName: string, activity: IActivity, existingGraphData: IWalkGraphDataPoint}): IWalkGraphDataPoint => {\n  let graphDataPt: IWalkGraphDataPoint\n    if (data.existingGraphData) {\n      graphDataPt = {\n        ...data.existingGraphData,\n        short: data.activityName === 'short' ? data.activityTime + data.existingGraphData.short : data.existingGraphData.short,\n        medium: data.activityName === 'medium' ? data.activityTime + data.existingGraphData.medium : data.existingGraphData.medium,\n        long: data.activityName === 'long' ? data.activityTime + data.existingGraphData.long : data.existingGraphData.long\n      }\n    } else {\n      graphDataPt = {\n        date: new Date(data.activity.activityTimeStamps[0]),\n        short: data.activityName === 'short' ? data.activityTime : 0,\n        medium: data.activityName === 'medium' ? data.activityTime : 0,\n        long: data.activityName === 'long' ? data.activityTime : 0,\n      }\n    }\n    return graphDataPt\n}\n\nconst cavallettiGraphDataPts = (data: { activityTime: number, activityName: string, activity: IActivity, existingGraphData: ICavalettiGraphDataPoint}): ICavalettiGraphDataPoint => {\n  let graphDataPt: ICavalettiGraphDataPoint\n    if (data.existingGraphData) {\n      graphDataPt = {\n        ...data.existingGraphData,\n        rookie: data.activityName === 'rookie' ? data.activityTime + data.existingGraphData.rookie : data.existingGraphData.rookie,\n        hotdawg: data.activityName === 'hotdawg' ? data.activityTime + data.existingGraphData.hotdawg : data.existingGraphData.hotdawg,\n        prodawg: data.activityName === 'prodawg' ? data.activityTime + data.existingGraphData.prodawg : data.existingGraphData.prodawg\n      }\n    } else {\n      graphDataPt = {\n        date: new Date(data.activity.activityTimeStamps[0]),\n        rookie: data.activityName === 'rookie' ? data.activityTime : 0,\n        hotdawg: data.activityName === 'hotdawg' ? data.activityTime : 0,\n        prodawg: data.activityName === 'prodawg' ? data.activityTime : 0,\n      }\n    }\n    return graphDataPt\n}\nconst groupedActivity = (activities: IActivity[]): GraphDataPointDictionary => {\n  const data = activities.reduce((accum: GraphDataPointDictionary, activity: IActivity): GraphDataPointDictionary => {\n    const activityTime: number = Math.ceil(calculateActivityTime(activity.activityTimeStamps) / 60);\n    const activityName = activityLength(activity.name)\n    const computedDateIndex: string = getDay(activity.activityTimeStamps[0]);\n    const existingGraphData = accum[computedDateIndex];\n    let graphDataPt: IWalkGraphDataPoint | ICavalettiGraphDataPoint\n    if(isWalkActivity(activity.activityType)) {\n      graphDataPt = walkGraphDataPts({\n        activityTime, \n        activityName, \n        activity, \n        existingGraphData: (existingGraphData as IWalkGraphDataPoint)})\n      } else {\n        graphDataPt = cavallettiGraphDataPts({\n          activityTime, \n          activityName, \n          activity, \n          existingGraphData: (existingGraphData as ICavalettiGraphDataPoint)})\n    }\n    return {\n      ...accum,\n      [computedDateIndex]: graphDataPt\n    };\n  }, {})\n  return data;\n}\n\nfunction activityGroupedByDate(activity: IActivity[]): WalkGraphDataPointDictionary\nfunction activityGroupedByDate(activity: IActivity[]): CavelettiGraphDataPointDictionary\nfunction activityGroupedByDate(activity: IActivity[]): GraphDataPointDictionary {\n  return groupedActivity(activity)\n}\n\n// type guard\nfunction isWalkGraphDataPoint(data: IWalkGraphDataPoint | ICavalettiGraphDataPoint): data is IWalkGraphDataPoint {\n  if(data as IWalkGraphDataPoint && (data as IWalkGraphDataPoint).short !== undefined) {\n    return true\n  }\n  return false\n}\n// type guard\nfunction isWalkActivity(data: ActivityType): data is ActivityType {\n  return (data === ActivityType.Walk)\n}\n\nfunction createGraphDataPoints(data: WalkGraphDataPointDictionary): IWalkDisplayGraphDataPoint[]\nfunction createGraphDataPoints(data: CavelettiGraphDataPointDictionary): ICavalettiDisplayGraphDataPoint[]\nfunction createGraphDataPoints(data: WalkGraphDataPointDictionary | CavelettiGraphDataPointDictionary):\n  IWalkDisplayGraphDataPoint[] | ICavalettiDisplayGraphDataPoint[] {\n  const entries = Object.entries(data);\n  if(entries === undefined || entries.length === 0 ) { return [] }\n  if (isWalkGraphDataPoint(entries[0][1])) {\n    return Object.entries(data).map(\n      ([key, value]) => {\n\n        return { date: key, short: value.short, medium: value.medium, long: value.long }\n      }\n    );\n  }\n\n  return Object.entries(data).map(\n    ([key, value]) => {\n\n      return { date: key, rookie: value.rookie, hotdawg: value.hotdawg, prodawg: value.prodawg }\n    }\n  );\n};\n\nexport const DawgResponsiveGraph: React.FC<IProps> = ({ walkHistory, cavalettiHistory }) => {\n  const walkGraphDataPts = createGraphDataPoints(activityGroupedByDate(walkHistory));\n  const cavalettiGraphDataPts = createGraphDataPoints(activityGroupedByDate(cavalettiHistory));\n  return (<> \n    <ResponsiveDawgActivityRenderer graphDataPts={walkGraphDataPts} chartTitle={\"Walk Chart\"} chartKeys={['short', 'medium', 'long']} />\n    <ResponsiveDawgActivityRenderer graphDataPts={cavalettiGraphDataPts} chartTitle={\"Caveletti Chart\"} chartKeys={['rookie', 'hotdawg', 'prodawg']}/>\n  </>)\n}\nexport default DawgResponsiveGraph;","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { colors } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${colors.silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${colors.blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${colors.blue};\n`;\n\ninterface IProps {\n  totalWalkActivityTime: number\n  totalCavelettiActivityTime: number\n}\n\nexport const ProgressNotification: React.FC<IProps> = ({ totalWalkActivityTime, totalCavelettiActivityTime }) => {\n  const formatWalkActivityTime = moment(totalWalkActivityTime).format('mm:ss');\n  const formatCavalettiActivityTime = moment(totalCavelettiActivityTime).format('mm:ss');\n    if(totalWalkActivityTime > 0 || totalCavelettiActivityTime > 0) {\n    return (\n      <NotificationContainer>\n        <NotificationText>Total Walk Time \n          <StrongSpan> {formatWalkActivityTime}</StrongSpan>\n        </NotificationText>\n        <NotificationText>Total Cavaletti Time \n          <StrongSpan> {formatCavalettiActivityTime}</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n\n  return (\n    <NotificationContainer>\n      <NotificationText>View your Dawg's activity feed here!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default ProgressNotification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../../components/Page';\nimport { DawgResponsiveGraph } from '../../components/DawgResponsiveGraph';\nimport { ProgressNotification } from '../../components/ProgressNotification';\nimport { IActivity } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { colors } from '../../utils/constants';\nimport { calculateWeeklyActivityTime } from '../../utils/timeCalculation';\n\nconst ReportContainer = styled.div`\n  padding: 1\n  border: 3px solid ${colors.red};\n  height: 350px;\n  width: 75%;\n  alignment-baseline: baseline\n`;\n\ninterface IProps {\n  walkHistory: IActivity[]\n  cavalettiHistory: IActivity[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory, cavalettiHistory }) => {\n  const totalWalkActivityTime = calculateWeeklyActivityTime(walkHistory) * 1000;\n  const totalCavelettieActivityTime = calculateWeeklyActivityTime(cavalettiHistory) * 1000;\n\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <ProgressNotification totalWalkActivityTime={totalWalkActivityTime} totalCavelettiActivityTime={totalCavelettieActivityTime}/>\n          {/* <DawgActivityReport walkHistory={walkHistory} cavalettiHistory={cavalettiHistory}/> */}\n          <DawgResponsiveGraph walkHistory={walkHistory} cavalettiHistory={cavalettiHistory}/>   \n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T, resetLocalStorage: boolean = false) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return !item || resetLocalStorage ? initialValue : JSON.parse(item);\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  // local storage is automatically set when state is updated.\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IActivity } from '../utils/types';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IActivity[]>('walkHistory', []);\n  const [ cavalettiHistory, setCavalettiHistory ] = useLocalStorage<IActivity[]>('cavalettiHistory', []);\n  const [ activityTimeStamps, setActivityTimeStamps ] = useLocalStorage<number[]>('activityTimeStamps', []);\n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setActivityTimeStamps={setActivityTimeStamps} activityTimeStamps={activityTimeStamps} />\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setActivityTimeStamps={setActivityTimeStamps} activityTimeStamps={activityTimeStamps} />} />\n        <Route path=\"/walks/:grade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps}/>\n\n        </Route>\n        {/* Below is a different style of adding a route */}\n        <Route path=\"/cavaletti/:grade/\" exact>\n          <Caveletti setCavalettiHistory={setCavalettiHistory} activityTimeStamps={activityTimeStamps} setActivityTimeStamps={setActivityTimeStamps} />\n        </Route>\n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory} cavalettiHistory={cavalettiHistory}/>\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { colors, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${colors.white};\n  // padding: 5px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${colors.white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  // font-size: 12px;\n  padding: 5px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={colors.blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={colors.blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}