{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","components/Timer.tsx","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","pages/ProgressReport/ProgressReport.tsx","hooks/useLocalStorage.ts","hooks/useIsClient.ts","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blue","red","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","Svg","svg","ColouredSquare","fill","role","width","height","x","y","ColouredPaw","Dawg","GuideDog","RehabDawg","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","walkTimeStamps","length","lastWalkTimeStamp","slice","shift","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","WalkContainer","CavalettiContainer","HomePage","setWalkTimeStamps","handleClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","href","PauseDawg","Pause","PauseWalk","formatTimeLeft","difference","timeLeftMap","Math","floor","formatTime","pad","input","toString","padStart","CountDownDawg","PauseResumeContainer","Timer","walkTime","startTime","walkTimeSeconds","useState","timeElapsed","setTimeElapsed","useEffect","timer","setTimeout","round","clearTimeout","alert","DoneDawg","Bone","DoneWalk","DoneButton","gradeMap","ActiveWalk","setWalkHistory","grade","useParams","getStartTime","console","log","currentWalk","walkName","history","Caveletti","ReportContainer","ReportItemText","noWalkContainer","ProgressReport","walkHistory","walkItems","map","walk","result","i","calculateActivityTime","walkGrade","dateTime","key","noWalks","useLocalStorage","initialValue","isClient","setClient","useIsClient","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.69ef3132.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 48;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\n// background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n// height: calc(100vh - 50px);\n// display: flex;\n// flex-direction: column;\n// justify-content: space-around;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  purple,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || purple};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\ninterface IProps {\n  walkTimeStamps: number[] \n}\n\nexport const Notification: React.FC<IProps> = ({ walkTimeStamps }) => {\n  if (walkTimeStamps.length) {\n    const lastWalkTimeStamp = walkTimeStamps.slice(walkTimeStamps.length - 1).shift();\n    const formatLastWalkTime = moment(lastWalkTimeStamp).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  return (\n    <NotificationContainer>\n      <NotificationText>Start logging those Rehab Walks!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo } from '../components/SharedStyles';\nimport { ColouredPaw, ColouredSquare } from '../assets/svg/ColouredShapes';\nimport { green, red, blue, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { IWalk } from '../utils/types';\n// import useLocalStorage from '../hooks/useLocalStorage';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\npadding: 0 ${gutterWidth}px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${blue};\nflex-direction: row\n`\n\nconst WalkContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\nconst CavalettiContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  walkTimeStamps: number[];\n};\n\nexport const HomePage: React.FC<IProps> = ({ setWalkTimeStamps, walkTimeStamps }) => {\n  const handleClick = () => setWalkTimeStamps([Date.now()]);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg <br />\n            <RehabDawg fill={green}/>\n            <RehabDawg fill={blue}/>\n            <RehabDawg fill={red}/>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <WalkContainer>\n            <StartButton to=\"/walks/green\" onClick={handleClick}>\n              <ColouredPaw fill={green} />\n              1 mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleClick}>\n              <ColouredPaw fill={blue} />\n              10 mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleClick}>\n              <ColouredPaw fill={red}/>\n              15 mins\n            </StartButton>\n          </WalkContainer>\n          <HeadingContainer>\n            Cavaletti\n          </HeadingContainer>\n          <CavalettiContainer>\n          <StartButton to=\"/cavaletti/green\" onClick={handleClick}>\n              <ColouredSquare fill={red}/>\n              15 mins\n            </StartButton>\n          </CavalettiContainer>\n        </RehabActivityContainer>\n        <Notification walkTimeStamps={walkTimeStamps}/>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n  margin-left: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","interface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nexport const calculateActivityTime = (walkTimeStamps: number[]): number => {\n  let result = 0;\n  for (let i = 0; i < walkTimeStamps.length - 1; i += 2) {\n    const timeDiff = (walkTimeStamps[i+1] - walkTimeStamps[i]);\n    result += timeDiff;\n  }\n\n  return Math.round(result / 1000);\n}\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {formatTimeLeft} from '../utils/timeFormatter';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  startTime: number;\n  walkTime: number;\n}\n\nexport const Timer: React.FC<IProps> = ({ walkTime, startTime }) => {\n  const walkTimeSeconds = walkTime * 60;\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const now = Date.now();\n      setTimeElapsed(() => Math.round((now - startTime)/1000));\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n  // console.log(' ===> startTime', startTime)\n  // console.log(' ===> timeElapsed', timeElapsed)\n  // console.log(' ===> walkTimeSeconds', walkTimeSeconds)\n  return (\n    <>\n      <CountDownDawg>\n        {formatTimeLeft(walkTimeSeconds - timeElapsed)}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        <PauseWalk fill={orange} handleClick={() => alert('Pausing!')}/>\n        <ResumeWalk fill={darkgreen} handleClick={() => alert('Resuming')}/>\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper} from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk, WalkName } from '../../utils/types';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\nconst gradeMap = {\n  'green': 1,\n  'blue': 10,\n  'red': 15\n};\n\nconst sessionTime = (walkName: WalkName): number => {\n  return gradeMap[walkName];\n};\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IWalk[]>) => void\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void\n  walkTimeStamps: number[]\n}\n\nconst getStartTime = (walkTimeStamps: number[]): number => walkTimeStamps[walkTimeStamps.length - 1];\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory, walkTimeStamps, setWalkTimeStamps }) => {\n  const { grade } = useParams();\n  const walkTime = sessionTime(grade);\n  const startTime = getStartTime(walkTimeStamps);\n  console.log('timestamps ==>', walkTimeStamps)\n  const handleClickOnDone = (): void => {\n    setWalkTimeStamps((walkTimeStamps: number[]) => [...walkTimeStamps, Date.now()])\n    // event.preventDefault(); //pattern to not post \"ACTION\" on hte button onvlick handler\n    // const walkingRehabTime = calculateActivityTime([...walkTimeStamps, Date.now()]);\n\n    let currentWalk: IWalk = {\n      walkName: grade,\n      walkTimeStamps: walkTimeStamps\n    }\n    setWalkHistory((history: IWalk[]): IWalk[] => [...history, currentWalk]);\n  };\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session <br />\n            <RehabDawg fill={grade}/>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} startTime={startTime} />\n        <DoneButton to=\"/home\" onClick={handleClickOnDone}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\n\nimport {Page} from '../../components/Page';\nimport {Logo, LogoWrapper} from '../../components/SharedStyles';\n\nexport const Caveletti: React.FC = () => {\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti <br />\n          </Logo>\n        </LogoWrapper>\n        {/* <Timer walkTime={walkTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton> */}\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n// import InfiniteScroll from 'react-infinite-scroller';\n\nimport { Page } from '../../components/Page';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { calculateActivityTime } from '../../utils/timeFormatter'\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { blue } from '../../utils/constants';\n\n\nconst ReportContainer = styled.div`\n  // background-image: linear-gradient(to bottom right, ${blue}, ${'lightblue'}); \n  min-height: 100vh;\n  padding: 0 12px 62px 12px\n`;\n\nconst WalkContainer = styled.div`\n  border: 2px solid ${blue};\n  border-radius: 5px;\n  padding: 6px;\n  margin: 0 12px;\n  background-color: rgba( 256, 256, 256, 0.1 );\n  margin-bottom 62px; \n`;\n\nconst ReportItemText = styled.div`\n    color: ${blue};\n    font-size: 12px;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n`;\n\nconst walkGrade = (walkName: WalkName): string => {\n  const grade = {\n    'green': 'short',\n    'blue': 'medium',\n    'red': 'long'\n  }\n  return grade[walkName];\n}\n\nconst noWalkContainer = (): JSX.Element => <WalkContainer><ReportItemText>Welcome, record your Dawgs Rehab history!</ReportItemText></WalkContainer>\n\ninterface IProps {\n  walkHistory: IWalk[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory }) => {\n  console.log('===> history', walkHistory);\n  const walkItems = walkHistory.map((walk: IWalk) => {\n    const lastWalkTimeStamp = walk.walkTimeStamps.slice(walk.walkTimeStamps.length - 1).shift(); //.format('MMM Do YYYY, h:mm a')\n    if(lastWalkTimeStamp) {\n      const walkTime = moment(calculateActivityTime(walk.walkTimeStamps)).format('mm:ss');\n      const walkName = walkGrade(walk.walkName as WalkName);\n      const dateTime = moment(lastWalkTimeStamp).format('MMM Do YYYY, h:mm a');\n      return (\n  \n        <WalkContainer key={lastWalkTimeStamp}>\n          <ReportItemText><StrongSpan>{dateTime}</StrongSpan></ReportItemText>\n          <ReportItemText><StrongSpan>Total time: </StrongSpan>{walkTime}</ReportItemText>\n          <ReportItemText><StrongSpan>Walk grade: </StrongSpan>{walkName}</ReportItemText>\n        </WalkContainer>\n  \n      )\n    }\n    return noWalkContainer();\n  });\n\n  const noWalks = noWalkContainer();\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <WalkContainer>\n            {/* <InfiniteScroll\n              pageStart={0}\n              loadMore={walkItems}\n              hasMore={true || false}\n              loader={<div className=\"loader\" key={0}>Loading ...</div>}> \n              {history.length ? walkItems : noWalks}\n            </InfiniteScroll>                                  */}\n            {walkHistory.length ? walkItems : noWalks}\n          </WalkContainer>\n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport useIsClient from './useIsClient';\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // Prevent build error \"window is undefined\" but keep keep working\n  const isClient = useIsClient();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage then\n    // parse stored json or return initialValue\n    // console.log('isClient ==> ', isClient)\n    // if (!isClient) {\n    //   return initialValue;\n    // }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (isClient) {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}","import { useEffect, useState } from 'react';\n\nexport default function useIsClient() {\n  const [isClient, setClient] = useState(false);\n  useEffect(() => {\n    setClient(true);\n  }, []);\n  return isClient;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IWalk[]>('walkHistory', []); \n  const [ walkTimeStamps, setWalkTimeStamps ] = useLocalStorage<number[]>('walkTimeStamps', []); \n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>} />\n        <Route path=\"/walks/:grade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} walkTimeStamps={walkTimeStamps} setWalkTimeStamps={setWalkTimeStamps}/>\n\n        </Route>\n        <Route path=\"/cavaletti/:grade/\" exact component={Caveletti} setWalkHistory={setWalkHistory} />\n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory}/>\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { white, blue, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 12px;\n  padding: 14px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}