{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","hooks/useLocalStorage.ts","hooks/useIsClient.ts","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","components/Timer.tsx","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/ProgressReport/ProgressReport.tsx","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blue","PageContainer","styled","div","Heading","h2","Page","children","LogoWrapper","Logo","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","ColouredPaw","svg","fill","Dawg","GuideDog","RehabDawg","useLocalStorage","key","initialValue","isClient","useState","setClient","useEffect","useIsClient","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","history","lastWalk","length","finishDateTime","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HomePage","setStartDateTime","handleClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","href","PauseDawg","Pause","PauseWalk","timeLeftInMilliseconds","walkTimeMilliSeconds","difference","pad","input","toString","padStart","CountDownDawg","PauseResumeContainer","Timer","walkTime","timeLeft","setTimeLeft","timer","setTimeout","clearTimeout","minutes","Math","floor","seconds","formatTimeLeft","alert","DoneDawg","Bone","DoneWalk","DoneButton","walkMap","ActiveWalk","setHistory","startDateTime","walkGrade","useParams","currentWalk","walkName","push","ReportContainer","WalkContainer","ReportItemText","ProgressReport","walkItems","map","walk","dateTime","noWalks","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8ae1a23d.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\nexport const appMaxWidth = 812;\nexport const navBarHeight = 48;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\n// background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n// height: calc(100vh - 50px);\n// display: flex;\n// flex-direction: column;\n// justify-content: space-around;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\nexport const Page: React.FC = ({\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  purple,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 800;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || purple};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import { useState } from 'react';\nimport useIsClient from './useIsClient';\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // Prevent build error \"window is undefined\" but keep keep working\n  const isClient = useIsClient();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage then\n    // parse stored json or return initialValue\n    // console.log('isClient ==> ', isClient)\n    // if (!isClient) {\n    //   return initialValue;\n    // }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (isClient) {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}","import { useEffect, useState } from 'react';\n\nexport default function useIsClient() {\n  const [isClient, setClient] = useState(false);\n  useEffect(() => {\n    setClient(true);\n  }, []);\n  return isClient;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\nimport { IWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\nexport const Notification: React.FC = () => {\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const lastWalk = history[history.length - 1];\n  if (lastWalk?.finishDateTime) {\n    const formatLastWalkTime = moment(history.finishDateTime).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  // console.log('Walks', history);\n  return (\n    <NotificationContainer>\n      <NotificationText>Start logging those Rehab Walks!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../components/Page';\nimport {ButtonBaseWithLink, LogoWrapper, Logo} from '../components/SharedStyles';\nimport {ColouredPaw} from '../assets/svg/ColouredShapes';\nimport { green, red, blue, gutterWidth } from '../utils/constants';\nimport {RehabDawg} from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { IWalk } from '../utils/types';\n// import useLocalStorage from '../hooks/useLocalStorage';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\npadding: 0 ${gutterWidth}px;\n`;\n\ninterface IProps {\n  // setStartDateTime: (aw: number) => void\n  setStartDateTime: (start: number) => void\n};\n\nexport const HomePage: React.FC<IProps> = ({ setStartDateTime }) => {\n  // const [ startDateTime, setStartDateTime ] = useLocalStorage<number>('startDateTime', 0); \n  const handleClick = () => setStartDateTime(Date.now());\n  return (\n    <>\n      <Page>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg <br />\n            <RehabDawg fill={green}/>\n            <RehabDawg fill={blue}/>\n            <RehabDawg fill={red}/>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <StartButton to=\"/walks/green\" onClick={handleClick}>\n            <ColouredPaw fill={green} />\n            5 minutes\n          </StartButton>\n          <StartButton to=\"/walks/blue\" onClick={handleClick}>\n            <ColouredPaw fill={blue} />\n            10 minutes\n          </StartButton>\n          <StartButton to=\"/walks/red\" onClick={handleClick}>\n            <ColouredPaw fill={red}/>\n            15 minutes\n          </StartButton>\n        </RehabActivityContainer>\n        <Notification />\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n  margin-left: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","interface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const minutes = Math.floor((difference / 1000 / 60) % 60);\n    const seconds = Math.floor((difference / 1000) % 60);\n    return `${pad(minutes)}:${pad(seconds)}`;\n  } \n  return 'All done!';\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {timeLeftInMilliseconds, formatTimeLeft} from '../utils/timeFormatter';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  walkTime: number;\n}\n\nexport const Timer: React.FC<IProps> = ({ walkTime = 0 }) => {\n  const walkTimeMilli = walkTime * 60 * 1000;\n  const [timeLeft, setTimeLeft] = useLocalStorage('timeLeft', timeLeftInMilliseconds(walkTimeMilli));\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(() => timeLeftInMilliseconds(timeLeft));\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n\n  return (\n    <>\n      <CountDownDawg>\n        {formatTimeLeft(timeLeft)}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        <PauseWalk fill={orange} handleClick={() => alert('Pausing!')}/>\n        <ResumeWalk fill={darkgreen} handleClick={() => alert('Resuming')}/>\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper} from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk } from '../../utils/types';\nimport useLocalStorage from '../../hooks/useLocalStorage';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\ntype WalkName = 'green' | 'blue' | 'red'\n\nconst walkMap = {\n  'green': 5,\n  'blue': 10,\n  'red': 15\n};\n\nconst sessionTime = (walkName: WalkName): number => {\n  return walkMap[walkName];\n};\n\nexport const ActiveWalk: React.FC = () => {\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const [ timeLeft, setTimeLeft ] = useLocalStorage<number>('timeLeft', 0); \n  const [ startDateTime, setStartDateTime ] = useLocalStorage<number>('startDateTime', Date.now()); \n  // const [ activeWalk, setActiveWalk ] = useLocalStorage<IActiveWalk | undefined>('activeWalk', undefined); \n  const { walkGrade } = useParams();\n  const handleClick = () => {\n    let currentWalk: IWalk = {\n      walkName: walkGrade,\n      startDateTime: startDateTime,\n      walkTime: startDateTime - timeLeft,\n      finishDateTime: Date.now(),\n    }\n    history.push(currentWalk)\n    // setTimeLeft(0);\n    return setHistory(history);\n  };\n  \n  const walkTime = sessionTime(walkGrade);\n  // setTimeLeft(walkTime);\n  console.log(' ===> walkGrade', walkGrade)\n  console.log(' ===> walkTime', walkTime)\n  return (\n    <>\n      <Page>\n        <LogoWrapper>\n          <Logo>\n            Walk Session <br />\n            <RehabDawg fill={walkGrade}/>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { Page } from '../../components/Page';\nimport { IWalk } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport useLocalStorage from '../../hooks/useLocalStorage';\nimport { blue } from '../../utils/constants';\n\n// interface IProps {\n//   history: IWalk[]\n// }\n\nconst ReportContainer = styled.div`\n\n`;\n\nconst WalkContainer = styled.div`\n    border: 1px solid ${blue};\n    border-radius: 5px;\n    padding: 25px;\n    margin: 10 10px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst ReportItemText = styled.div`\n    color: ${blue};\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n`;\n\nexport const ProgressReport: React.FC = () => {\n  const [ history, setHistory] = useLocalStorage<IWalk[]>('history', []); \n  console.log('===> history', history);\n  const walkItems = history.map((walk: IWalk) => {\n    const dateTime = moment(walk.startDateTime).format('MMM Do YYYY, h:mm a')\n    const walkTime = moment(walk.walkTime).format('MMM Do YYYY, h:mm a')\n    const walkName = walk.walkName;\n    return (\n      <WalkContainer key={walk.startDateTime}>\n        <ReportItemText><StrongSpan>{dateTime}</StrongSpan></ReportItemText>\n        <ReportItemText><StrongSpan>Total time: </StrongSpan>{walkTime}</ReportItemText>\n        <ReportItemText><StrongSpan>Walk grade: </StrongSpan>{walkName}</ReportItemText>\n      </WalkContainer>\n\n    )\n\n  })\n  const noWalks = <WalkContainer><ReportItemText>Welcome, record your Dawgs Rehab history!</ReportItemText></WalkContainer>\n  return (\n    <>\n      <Page>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <WalkContainer>\n            {history.length ? walkItems : noWalks}\n          </WalkContainer>\n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\nimport { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk } from '../utils/types';\nimport { IActiveWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  max-width: ${appMaxWidth}px;\n  margin: 0 auto;\n`;\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const [ startDateTime, setStartDateTime ] = useLocalStorage('startDateTime', 0); \n  // console.log('==> AW:', startDateTime);\n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setStartDateTime={setStartDateTime} />\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setStartDateTime={setStartDateTime} />} />\n        <Route path=\"/walks/:walkGrade/\" exact component={ActiveWalk} setHistory={setHistory}/>\n        <Route path=\"/progress\" exact>\n          <ProgressReport />\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 45px\n  height: 45px;\n  width: 45px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { white, blue, appMaxWidth,  navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 12px;\n  padding: 14px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}