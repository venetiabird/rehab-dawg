{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","components/Timer.tsx","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","components/DawgWalkItem.tsx","components/DawgWalks.tsx","components/Pagination.tsx","pages/ProgressReport/ProgressReport.tsx","hooks/useLocalStorage.ts","hooks/useIsClient.ts","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blue","red","gradeMap","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","DawgContainer","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","ColouredPaw","svg","fill","Dawg","GuideDog","RehabDawg","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","walkTimeStamps","length","lastWalkTimeStamp","slice","shift","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","ActivityContainer","HomePage","setWalkTimeStamps","handleStartButtonClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","handleClick","href","PauseDawg","Pause","PauseWalk","formatTimeLeft","difference","timeLeftMap","Math","floor","formatTime","pad","input","toString","padStart","CountDownDawg","PauseResumeContainer","Timer","walkTime","startTime","useState","timeElapsed","setTimeElapsed","console","log","walkTimeSeconds","isActive","setIsActive","start","toggle","x","useEffect","timer","pausedTime","setTimeout","round","clearTimeout","DoneDawg","Bone","DoneWalk","DoneButton","ActiveWalk","setWalkHistory","grade","useParams","getStartTime","result","currentWalk","walkName","history","Caveletti","WalkContainer","ReportItemText","DawgWalkItem","walk","loading","activityTime","i","calculateActivityTime","walkGrade","dateTime","key","DawgWalks","walks","map","Guid","create","PaginationButton","Pagination","walksPerPage","totalWalks","paginate","pageNumbers","totalPageNumbers","ceil","push","className","number","ReportContainer","ProgressReport","walkHistory","currentPage","setCurrentPage","indexOfLastWalk","indexOfFirstWalk","currentWalks","pageNumber","useLocalStorage","initialValue","isClient","setClient","useIsClient","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d96bf22.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 36;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n\nexport const gradeMap = {\n  'green': 5,\n  'blue': 10,\n  'red': 15\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  blue,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const DawgContainer = styled.div`\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || blue};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\ninterface IProps {\n  walkTimeStamps: number[] \n}\n\nexport const Notification: React.FC<IProps> = ({ walkTimeStamps }) => {\n  if (walkTimeStamps.length) {\n    const lastWalkTimeStamp = walkTimeStamps.slice(walkTimeStamps.length - 1).shift();\n    const formatLastWalkTime = moment(lastWalkTimeStamp).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  return (\n    <NotificationContainer>\n      <NotificationText>Start logging those Rehab Walks!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo, DawgContainer } from '../components/SharedStyles';\nimport { ColouredPaw } from '../assets/svg/ColouredShapes';\nimport { green, red, blue, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { gradeMap } from '../utils/constants';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\npadding: 0 ${gutterWidth}px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${blue};\nflex-direction: row\n`\n\nconst ActivityContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  walkTimeStamps: number[];\n};\n\nexport const HomePage: React.FC<IProps> = ({ setWalkTimeStamps, walkTimeStamps }) => {\n  const handleStartButtonClick = () => setWalkTimeStamps([Date.now()]);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg\n            <DawgContainer>\n              <RehabDawg fill={green}/>\n              <RehabDawg fill={blue}/>\n              <RehabDawg fill={red}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <ActivityContainer>\n            <StartButton to=\"/walks/green\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={green} />\n                {gradeMap['green']} mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={blue} />\n              {gradeMap['blue']} mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={red}/>\n              {gradeMap['red']} mins\n            </StartButton>\n          </ActivityContainer>\n          {/* <HeadingContainer>\n            Cavaletti\n          </HeadingContainer> */}\n          {/* <ActivityContainer>\n          <StartButton to=\"/cavaletti/green\" onClick={handleStartButtonClick}>\n              <ColouredSquare fill={red}/>\n              15 mins\n            </StartButton>\n          </ActivityContainer> */}\n        </RehabActivityContainer>\n        <Notification walkTimeStamps={walkTimeStamps}/>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n  margin-left: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","interface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\n/** \n * The return time is in seconds\n*/\nexport const calculateActivityTime = (walkTimeStamps: number[]): number => {\n  let result = 0;\n  for (let i = 0; i < walkTimeStamps.length - 1; i += 2) {\n    const timeDiff = (walkTimeStamps[i+1] - walkTimeStamps[i]);\n    result += timeDiff;\n  }\n  return Math.round(result / 1000);\n}\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\n\nimport useSound from 'use-sound';\n// import woofSfx from '../assets/sounds/woof.mp3';\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {formatTimeLeft} from '../utils/timeFormatter';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  startTime: number;\n  walkTimeStamps: number[];\n  walkTime: number;\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void;\n}\n\n\nconst getStartTime = (times: number[]): number => times[times.length - 1];\n\nexport const Timer: React.FC<IProps> = ({ walkTime, startTime, walkTimeStamps, setWalkTimeStamps }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  console.log('elapsed ==>', timeElapsed)\n  console.log('walkTime ==>', walkTime)\n  let walkTimeSeconds = walkTime * 60 - timeElapsed;\n  const [isActive, setIsActive] = useState(true);\n  let start = walkTimeStamps[0];// getStartTime(walkTimeStamps);\n  \n  \n  const toggle = (): void => {\n    // const x = timeElapsed;\n    // I think the start time can be replaced with the first item in walkTimeStamps array, and the its the even index\n    console.log('isActive1 ==>', isActive)\n    setIsActive(!isActive);\n    console.log('isActive2 ==>', isActive)\n    // walkTimeSeconds = walkTimeSeconds;\n    setWalkTimeStamps((x: number[]) => {\n      const result: number[] = [...x, Date.now()];\n      // start = getStartTime(walkTimeStamps);\n      return result;\n      })\n  }\n\n  const pauseComponent = () => {\n    return <PauseWalk fill={orange} handleClick={toggle} />;\n  }\n  \n  const playComponent = () => {\n    return <ResumeWalk fill={darkgreen} handleClick={toggle} />;\n  }\n  \n  useEffect(() => {\n    let timer = 0;\n    let pausedTime: number | null = null;\n    if(isActive) {\n      console.log('isActive3 ==>', isActive)\n      timer = setTimeout(() => {\n        const now = pausedTime || Date.now();\n        setTimeElapsed(() => Math.round((now - start)/1000));\n      }, 1000);\n    } else if (!isActive && timeElapsed !== 0){\n      pausedTime = Date.now();\n      console.log('isActive4 ==>', isActive)\n      clearTimeout(timer);\n    }\n    return () => clearTimeout(timer);\n  });\n  // const woof = new Audio('../assets/sounds/woof.mp3')\n  // woof.load()\n  // woof.play()\n  // const [play] = useSound('../assets/sounds/woof.mp3', { volume: 0.99 });\n  return (\n    <>\n      <CountDownDawg>\n        {/* {play()} */}\n        {formatTimeLeft(walkTimeSeconds - timeElapsed)}\n        {/* {walkTimeSeconds - timeElapsed === 0? play() : formatTimeLeft(walkTimeSeconds - timeElapsed) } */}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        {isActive ? pauseComponent() : playComponent()}\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper, DawgContainer } from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { gradeMap } from '../../utils/constants';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\nconst sessionTime = (walkName: WalkName): number => {\n  return gradeMap[walkName];\n};\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IWalk[]>) => void\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void\n  walkTimeStamps: number[]\n}\n\nconst getStartTime = (walkTimeStamps: number[]): number => walkTimeStamps[walkTimeStamps.length - 1];\n\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory, walkTimeStamps, setWalkTimeStamps }) => {\n  const { grade } = useParams();\n  const walkTime = sessionTime(grade);\n  const startTime = getStartTime(walkTimeStamps);\n  console.log('walkTimeStamps timestamps ==>', walkTimeStamps)\n  const handleClickOnDone = (): void => {\n    setWalkTimeStamps((x: number[]) => {\n      const result: number[] = [...x, Date.now()];\n      \n      let currentWalk: IWalk = {\n        walkName: grade,\n        walkTimeStamps: result // this is not being updated with the value in setWwalkTimeStamps\n      }\n      setWalkHistory((history: IWalk[]): IWalk[] => [...history, currentWalk]);\n      return result;\n    })\n  };\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session\n            <DawgContainer>\n              <RehabDawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} startTime={startTime} walkTimeStamps={walkTimeStamps} setWalkTimeStamps={setWalkTimeStamps} />\n        <DoneButton to=\"/progress\" onClick={handleClickOnDone}>\n          <DoneWalk fill={white} />\n            Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\n\nimport {Page} from '../../components/Page';\nimport {Logo, LogoWrapper} from '../../components/SharedStyles';\n\nexport const Caveletti: React.FC = () => {\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti <br />\n          </Logo>\n        </LogoWrapper>\n        {/* <Timer walkTime={walkTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton> */}\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { IWalk, WalkName } from '../utils/types';\nimport { blue } from '../utils/constants';\nimport { calculateActivityTime } from '../utils/timeFormatter'\n\nconst WalkContainer = styled.div`\n  border: 0px solid ${blue};\n  border-radius: 5px;\n  padding: 10px;\n  margin: 0 12px;\n  background-color: rgba( 100, 170, 200, 0.1 );\n  margin-bottom 10px; \n`;\n\nconst ReportItemText = styled.div`\n    color: ${blue};\n    font-size: 12px;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n`;\n\ninterface IProps {\n  walk: IWalk;\n  loading: boolean;\n}\n\nconst walkGrade = (walkName: WalkName): string => {\n  const grade = {\n    'green': 'short',\n    'blue': 'medium',\n    'red': 'long'\n  }\n  return grade[walkName];\n}\n\nexport const DawgWalkItem: React.FC<IProps> = ({ walk, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  const lastWalkTimeStamp = walk.walkTimeStamps.slice(walk.walkTimeStamps.length - 1).shift(); //.format('MMM Do YYYY, h:mm a')\n  if(lastWalkTimeStamp) {\n    const activityTime = calculateActivityTime(walk.walkTimeStamps) * 1000;\n    const walkTime = moment(activityTime).format('mm:ss');\n    const walkName = walkGrade(walk.walkName as WalkName);\n    const dateTime = moment(lastWalkTimeStamp).format('MMM Do YYYY, h:mm a');\n  return (\n    <WalkContainer key={lastWalkTimeStamp}>\n      <ReportItemText><StrongSpan>{dateTime}</StrongSpan></ReportItemText>\n      <ReportItemText><StrongSpan>Total walk time: </StrongSpan>{walkTime}</ReportItemText>\n      <ReportItemText><StrongSpan>Walk grade: </StrongSpan>{walkName}</ReportItemText>\n    </WalkContainer>\n  )}\n  return <WalkContainer><ReportItemText>View your Dawg's Rehab progress!</ReportItemText></WalkContainer>;\n};\nexport default DawgWalkItem;","import React from 'react';\nimport { Guid } from \"guid-typescript\";\n\nimport { IWalk } from '../utils/types';\nimport { DawgWalkItem } from '../components/DawgWalkItem'; \n\ninterface IProps {\n  walks: IWalk[];\n  loading: boolean;\n}\n\nexport const DawgWalks: React.FC<IProps> = ({ walks, loading }) => {\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  return (\n    <>\n      {walks.map(walk => (\n        <DawgWalkItem key={Guid.create().toString()} walk={walk} loading={loading}/>\n      ))}\n    </>\n  )\n}\n\nexport default DawgWalks;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { blue } from '../utils/constants'; \n\nconst paginationButtonStyle = `\n  border: none;\n  font-size: 12px;\n  font-weight: 400;\n  padding: 0 20px;\n  align-items: center;\n  justify-content: center;\n  height: 12px;\n`;\n\nexport const PaginationButton = styled(Link)`\n${paginationButtonStyle}\n  color: ${blue};\n  border: 1px solid ${blue};\n  margin: 2px;\n`;\n\ninterface IProps {\n  walksPerPage: number;\n  totalWalks: number;\n  paginate: (pageNumber: number) => void;\n}\n\nexport const Pagination: React.FC<IProps> = ({ walksPerPage, totalWalks, paginate }) => {\n  const pageNumbers = [];\n\n  const totalPageNumbers = Math.ceil(totalWalks / walksPerPage);\n  for (let i = 1; i <= totalPageNumbers; i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => ( // how to implement prev / next instead\n          <PaginationButton key={number} to=\"/progress\" onClick={() => paginate(number)}>\n            {number} \n          </PaginationButton>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n// import Pagination from \"react-js-pagination\";\n\nimport { Page } from '../../components/Page';\nimport { DawgWalks } from '../../components/DawgWalks';\nimport { Pagination } from '../../components/Pagination';\nimport { IWalk } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { red } from '../../utils/constants';\n\nconst ReportContainer = styled.div`\n  padding: 1\n  border: 3px solid ${red};\n  height: 350px;\n  width: 75%;\n`;\n\ninterface IProps {\n  walkHistory: IWalk[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory }) => {\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1);\n  const [walksPerPage, setWalksPerPage] = useState(5);\n\n  // Get current walks\n  const indexOfLastWalk = currentPage * walksPerPage;\n  const indexOfFirstWalk = indexOfLastWalk - walksPerPage;\n  const currentWalks = walkHistory.slice(indexOfFirstWalk, indexOfLastWalk);\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <DawgWalks walks={currentWalks} loading={loading}/>\n          <Pagination\n            walksPerPage={walksPerPage}\n            totalWalks={walkHistory.length}\n            paginate={paginate} />\n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport useIsClient from './useIsClient';\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // Prevent build error \"window is undefined\" but keep keep working\n  const isClient = useIsClient();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage then\n    // parse stored json or return initialValue\n    // console.log('isClient ==> ', isClient)\n    // if (!isClient) { // why did I have to comment this out??\n    //   return initialValue;\n    // }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (isClient) {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}","import { useEffect, useState } from 'react';\n\nexport default function useIsClient() {\n  const [isClient, setClient] = useState(false);\n  useEffect(() => {\n    setClient(true);\n  }, []);\n  return isClient;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IWalk[]>('walkHistory', []); \n  const [ walkTimeStamps, setWalkTimeStamps ] = useLocalStorage<number[]>('walkTimeStamps', []); \n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>} />\n        <Route path=\"/walks/:grade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} walkTimeStamps={walkTimeStamps} setWalkTimeStamps={setWalkTimeStamps}/>\n\n        </Route>\n        <Route path=\"/cavaletti/:grade/\" exact component={Caveletti} setWalkHistory={setWalkHistory} />\n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory}/>\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { white, blue, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  // padding: 5px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  // font-size: 12px;\n  padding: 5px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}