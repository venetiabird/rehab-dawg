{"version":3,"sources":["utils/constants.ts","components/Page.tsx","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Notification.tsx","pages/HomePage.tsx","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","utils/timeCalculation.ts","components/Timer.tsx","hooks/useInterval.ts","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","pages/Caveletti/Caveletti.tsx","components/ResponsiveDawgActivityRenderer.tsx","components/DawgResponsiveBar.tsx","components/ProgressNotification.tsx","pages/ProgressReport/ProgressReport.tsx","hooks/useLocalStorage.ts","components/Routes.tsx","assets/svg/Home.tsx","assets/svg/Progress.tsx","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["blue","red","GradeMap","PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","DawgContainer","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","ColouredPaw","svg","fill","Dawg","GuideDog","RehabDawg","NotificationContainer","NotificationText","p","StrongSpan","span","Notification","walkTimeStamps","length","lastWalkTimeStamp","slice","shift","formatLastWalkTime","moment","format","StartButton","RehabActivityContainer","HeadingContainer","h3","ActivityContainer","HomePage","setWalkTimeStamps","handleStartButtonClick","Date","now","to","onClick","ResumeDawg","Play","ResumeWalk","handleClick","href","PauseDawg","Pause","PauseWalk","formatTime","difference","Math","floor","pad","input","toString","padStart","calculateActivityTime","result","i","round","CountDownDawg","PauseResumeContainer","Timer","walkTime","useState","timeElapsed","setTimeElapsed","walkTimeSeconds","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","activeWalkTime","toggle","x","timeLeftMap","formatTimeLeft","DoneDawg","Bone","DoneWalk","DoneButton","ActiveWalk","setWalkHistory","grade","useParams","doneTime","setWalkTime","tempTimeStamps","setSeconds","currentWalk","walk","history","Caveletti","ResponsiveDawgActivityRenderer","graphDataPts","data","keys","indexBy","margin","top","right","bottom","left","padding","colors","scheme","defs","type","size","stagger","rotation","lineWidth","spacing","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","animate","motionStiffness","motionDamping","groupByDate","walks","reduce","accum","datetime","graphDataPt","actTime","ceil","computedDateIndex","toLocaleDateString","existingGraphData","short","medium","long","date","DawgResponsiveBar","walkHistory","graphData","Object","entries","map","key","value","ProgressNotification","totalActivityTime","formatActivityTime","ReportContainer","ProgressReport","currentPage","walksPerPage","indexOfLastWalk","indexOfFirstWalk","useLocalStorage","initialValue","resetLocalStorage","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setItem","stringify","MaxWidthContainer","Routes","location","useLocation","path","exact","render","component","DawgHouse","HomeSmile","RehabHome","DawgProgress","LineChart","RehabProgress","NavIconContainer","NavLink","Navigation","App","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b69c260.chunk.js","sourcesContent":["// gutterWidth, green, bannerHeight, blue\n\n// export const appMaxWidth = 960;\nexport const navBarHeight = 36;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n\nexport const GradeMap = {\n  'green': 1,\n  'blue': 10,\n  'red': 15\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface IProps {\n  heading: string\n}\n\nexport const Page: React.FC<IProps> = ({ heading = '',\n  children,\n}) => (\n  <>\n    <PageContainer>\n      <Heading />\n      {heading}\n      {children}\n    </PageContainer>\n  </>\n);","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  blue,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 400;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-around;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 1;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const DawgContainer = styled.div`\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || blue};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<IProps> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<IProps> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<IProps> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\ninterface IProps {\n  walkTimeStamps: number[] \n}\n\nexport const Notification: React.FC<IProps> = ({ walkTimeStamps }) => {\n  if (walkTimeStamps.length) {\n    const lastWalkTimeStamp = walkTimeStamps.slice(walkTimeStamps.length - 1).shift();\n    const formatLastWalkTime = moment(lastWalkTimeStamp).format('MMMM Do YYYY, h:mm:ss a');\n\n    return (\n      <NotificationContainer>\n        <NotificationText>Last Rehab Walk was on \n          <StrongSpan> {formatLastWalkTime}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n  return (\n    <NotificationContainer>\n      <NotificationText>Get Rehab Walking to see progress!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../components/Page';\nimport { ButtonBaseWithLink, LogoWrapper, Logo, DawgContainer } from '../components/SharedStyles';\nimport { ColouredPaw } from '../assets/svg/ColouredShapes';\nimport { green, red, blue, gutterWidth } from '../utils/constants';\nimport { RehabDawg } from '../assets/svg/Dawg';\nimport Notification from '../components/Notification';\nimport { GradeMap } from '../utils/constants';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n  margin: 5px\n`;\n\nconst RehabActivityContainer = styled.div`\nflex-direction: column;\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\npadding: 0 ${gutterWidth}px;\n`;\n\nconst HeadingContainer = styled.h3`\nfont-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\nfont-weight: 600;\nalign-items: left\nfont-size: 1.5em;\nborder-radius: 0;\ntext-align: left;\nborder: 0px solid ${blue};\nflex-direction: row\n`\n\nconst ActivityContainer = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: space-around;\n`\n\ninterface IProps {\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void;\n  walkTimeStamps: number[];\n};\n\nexport const HomePage: React.FC<IProps> = ({ setWalkTimeStamps, walkTimeStamps }) => {\n  const handleStartButtonClick = () => setWalkTimeStamps([Date.now()]);\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg\n            <DawgContainer>\n              <RehabDawg fill={green}/>\n              <RehabDawg fill={blue}/>\n              <RehabDawg fill={red}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <RehabActivityContainer>\n          <HeadingContainer>\n            Walks\n          </HeadingContainer>\n          <ActivityContainer>\n            <StartButton to=\"/walks/green\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={green} />\n                {GradeMap['green']} mins\n            </StartButton>\n            <StartButton to=\"/walks/blue\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={blue} />\n              {GradeMap['blue']} mins\n            </StartButton>\n            <StartButton to=\"/walks/red\" onClick={handleStartButtonClick}>\n              <ColouredPaw fill={red}/>\n              {GradeMap['red']} mins\n            </StartButton>\n          </ActivityContainer>\n          {/* <HeadingContainer>\n            Cavaletti\n          </HeadingContainer> */}\n          {/* <ActivityContainer>\n          <StartButton to=\"/cavaletti/green\" onClick={handleStartButtonClick}>\n              <ColouredSquare fill={red}/>\n              15 mins\n            </StartButton>\n          </ActivityContainer> */}\n        </RehabActivityContainer>\n        <Notification walkTimeStamps={walkTimeStamps}/>\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<IProps> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface IProps {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<IProps> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","import { Dictionary } from './types';\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTime = (difference: number): Dictionary<number> => {\n  const minutes = Math.floor((difference  / 60) % 60);\n  const seconds = Math.floor((difference) % 60);\n  return {\n    \"minutes\": minutes,\n    \"seconds\": seconds\n  }\n}\n\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nexport const formatTimeLeftCountUp = (difference: number, walkTime: number): Dictionary<number> | string => {\n  if (difference < walkTime) {\n    const timeLeftMap = formatTime(difference);\n    return `${pad(timeLeftMap['minutes'])}:${pad(timeLeftMap['seconds'])}`;\n  } \n  return 'All done!';\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import { IWalk} from './types'\n\n/** \n * The return time is in seconds\n*/\nexport const calculateWeeklyActivityTime = (walks: IWalk[]): number => {\n  let result = 0;\n  result = walks.reduce((accum: number, walk: IWalk) => {\n    return accum = accum + calculateActivityTime(walk.walkTimeStamps);\n  }, 0);\n  return result;\n}\n\n/** \n * The return time is in seconds\n */\nexport const calculateActivityTime = (walkTimeStamps: number[]): number => {\n  let result = 0;\n  for (let i = 0; i < walkTimeStamps.length - 1; i += 2) {\n    const timeDiff = (walkTimeStamps[i+1] - walkTimeStamps[i]);\n    result += timeDiff;\n  }\n  return Math.round(result / 1000);\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { useInterval } from '../hooks/useInterval';\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {formatTimeLeft } from '../utils/timeFormatter';\nimport {calculateActivityTime } from '../utils/timeCalculation';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface IProps {\n  walkTimeStamps: number[];\n  walkTime: number;\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void;\n}\n\nexport const Timer: React.FC<IProps> = ({ walkTime, walkTimeStamps, setWalkTimeStamps }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  let walkTimeSeconds = walkTime * 60;\n  const [isActive, setIsActive] = useState(true);\n  \n  useInterval(() => {\n    const activeWalkTime = calculateActivityTime([\n      ...walkTimeStamps, \n      ...(walkTimeStamps.length % 2 === 0 ? [] : [Date.now()])\n    ]);\n    setTimeElapsed(activeWalkTime);\n  }, 1000);\n\n  const toggle = (): void => {\n    setIsActive(!isActive);\n    setWalkTimeStamps((x: number[]) => [...x, Date.now()])\n  }\n  \n  return (\n    <>\n      <CountDownDawg>\n        {formatTimeLeft(walkTimeSeconds - timeElapsed)}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        {isActive ? (\n        <PauseWalk fill={orange} handleClick={toggle} />\n        ) : (\n          <ResumeWalk fill={darkgreen} handleClick={toggle} />\n        )}\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React, { useState, useEffect, useRef } from 'react';\n\nexport function useInterval(callback: () => void, delay: number) {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current?.();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<IProps> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper, DawgContainer } from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk, WalkName } from '../../utils/types';\nimport { calculateActivityTime } from '../../utils/timeCalculation';\nimport { GradeMap } from '../../utils/constants';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\nconst sessionTime = (walkName: WalkName): number => {\n  return GradeMap[walkName];\n};\n\ninterface IProps {\n  setWalkHistory: (walk: React.Dispatch<IWalk[]>) => void\n  setWalkTimeStamps: (walkTimeStamp: React.Dispatch<number[]> | number[]) => void\n  walkTimeStamps: number[]\n}\n\nexport const ActiveWalk: React.FC<IProps> = ({ setWalkHistory, walkTimeStamps, setWalkTimeStamps }) => {\n  const { grade } = useParams();\n  const walkTime = sessionTime(grade);\n  const handleClickOnDone = (): void => {\n    let doneTime = Date.now()\n    const activeWalkTime = calculateActivityTime([...walkTimeStamps, doneTime])\n    const setWalkTime = walkTime * 60;\n    let tempTimeStamps = walkTimeStamps.slice();\n    // this is not ideal because we are overriting the history. But maybe thats ok?\n    if(activeWalkTime > setWalkTime) {\n      tempTimeStamps = [tempTimeStamps[0], new Date(tempTimeStamps[0]).setSeconds(setWalkTime)]\n    } else {\n      tempTimeStamps = [...tempTimeStamps, doneTime]\n    }\n    let currentWalk: IWalk = {\n      walk: grade,\n      walkTimeStamps: tempTimeStamps\n    }\n    setWalkHistory((history: IWalk[]): IWalk[] => [...history, currentWalk]);\n  };\n  \n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session\n            <DawgContainer>\n              <RehabDawg fill={grade}/>\n            </DawgContainer>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} walkTimeStamps={walkTimeStamps} setWalkTimeStamps={setWalkTimeStamps} />\n        <DoneButton to=\"/progress\" onClick={handleClickOnDone}>\n          <DoneWalk fill={white} />\n            Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n      </Page>\n    </>\n  );\n};","import React from 'react';\n\nimport {Page} from '../../components/Page';\nimport {Logo, LogoWrapper} from '../../components/SharedStyles';\n\nexport const Caveletti: React.FC = () => {\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Caveletti <br />\n          </Logo>\n        </LogoWrapper>\n        {/* <Timer walkTime={walkTime} />\n        <DoneButton to=\"/home\" onClick={handleClick}>\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton> */}\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\n\nimport { IDisplayGraphDataPoint } from '../utils/types';\n\ninterface IRendererProps {\n  graphDataPts: IDisplayGraphDataPoint[]\n}\n\nexport const ResponsiveDawgActivityRenderer: React.FC<IRendererProps> = ({ graphDataPts }) => {\n  return <ResponsiveBar\n      data={graphDataPts}\n      keys={['short', 'medium', 'long']}\n      indexBy=\"date\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n      padding={0.3}\n      colors={{ scheme: 'category10' }}\n      defs={[\n          {\n              id: 'dots',\n              type: 'patternDots',\n              background: 'inherit',\n              color: '#38bcb2',\n              size: 4,\n              padding: 1,\n              stagger: true\n          },\n          {\n              id: 'lines',\n              type: 'patternLines',\n              background: 'inherit',\n              color: '#eed312',\n              rotation: -45,\n              lineWidth: 6,\n              spacing: 10\n          }\n      ]}\n      fill={[\n          {\n              match: {\n                  id: 'short'\n              },\n              id: 'dots'\n          },\n          {\n              match: {\n                  id: 'medium'\n              },\n              id: 'lines'\n          }\n      ]}\n      borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Date',\n          legendPosition: 'end',\n          legendOffset: 32\n      }}\n      axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Minutes',\n          legendPosition: 'end',\n          legendOffset: -40\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n      legends={[\n          {\n              dataFrom: 'keys',\n              anchor: 'bottom-right',\n              direction: 'column',\n              justify: false,\n              translateX: 120,\n              translateY: 0,\n              itemsSpacing: 2,\n              itemWidth: 100,\n              itemHeight: 20,\n              itemDirection: 'left-to-right',\n              itemOpacity: 0.85,\n              symbolSize: 20,\n              effects: [\n                  {\n                      on: 'hover',\n                      style: {\n                          itemOpacity: 1\n                      }\n                  }\n              ]\n          }\n      ]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n  />\n    }","import React from 'react';\n\nimport { IWalk, WalkName, IDisplayGraphDataPoint } from '../utils/types';\nimport { calculateActivityTime } from '../utils/timeCalculation';\nimport { ResponsiveDawgActivityRenderer } from './ResponsiveDawgActivityRenderer';\n\ninterface IProps {\n    walkHistory: IWalk[];\n  }\n\nconst walkLength = (walkName: WalkName): string => {\n    const walkMap = {\n        'green': 'short',\n        'blue': 'medium',\n        'red': 'long',\n    }   \n    return walkMap[walkName];\n}\n\nconst getDay = (datetime: number): string => {\n    return new Date(datetime).toLocaleDateString('en-EN');\n}\n\nconst groupByDate = (walks: IWalk[]): { [key: string]: IGraphDataPoint }  => {\n    const data =  walks.reduce((accum: { [key: string]: IGraphDataPoint }, walk: IWalk): { [key: string]: IGraphDataPoint } => {\n        const actTime: number = Math.ceil(calculateActivityTime(walk.walkTimeStamps) / 60);\n        const length = walkLength(walk.walk)\n        const computedDateIndex: string = getDay(walk.walkTimeStamps[0]);\n        const existingGraphData = accum[computedDateIndex];\n        \n        let graphDataPt: IGraphDataPoint\n        if(existingGraphData) {\n          graphDataPt = {\n            ...existingGraphData,\n            short: length === 'short'? actTime + existingGraphData.short : existingGraphData.short,\n            medium: length === 'medium'? actTime + existingGraphData.medium : existingGraphData.medium,\n            long: length === 'long'? actTime + existingGraphData.long : existingGraphData.long\n          }\n        } else {\n            graphDataPt = {\n              date: new Date(walk.walkTimeStamps[0]),\n              short: length === 'short'? actTime : 0,\n              medium: length === 'medium'? actTime : 0,\n              long: length === 'long'? actTime : 0,\n          }\n        }\n        return { \n          ...accum, \n          [computedDateIndex]: graphDataPt\n        };\n    }, {})\n    return data;\n}\n\ninterface IGraphDataPoint {\n    date: Date;\n    short: number;\n    medium: number;\n    long: number; \n}\n\n\n\n// const data: IDisplayGraphDataPoint[] = [\n//     {\n//         \"date\": \"Monday\",\n//         \"short\": 100,\n//         \"medium\": 0,\n//         \"long\": 10,\n//     },\n//     {\n//         \"date\": \"Tuesday\",\n//         \"short\": 100,\n//         \"medium\": 50,\n//         \"long\": 0\n//     },\n// ]\n// const data2 = [\n//     {\n//       \"country\": \"AD\",\n//       \"hot dog\": 27,\n//       \"hot dogColor\": \"hsl(31, 70%, 50%)\",\n//       \"burger\": 144,\n//       \"burgerColor\": \"hsl(208, 70%, 50%)\",\n//       \"sandwich\": 129,\n//       \"sandwichColor\": \"hsl(329, 70%, 50%)\",\n//       \"kebab\": 174,\n//       \"kebabColor\": \"hsl(318, 70%, 50%)\",\n//       \"fries\": 110,\n//       \"friesColor\": \"hsl(176, 70%, 50%)\",\n//       \"donut\": 182,\n//       \"donutColor\": \"hsl(37, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AE\",\n//       \"hot dog\": 192,\n//       \"hot dogColor\": \"hsl(136, 70%, 50%)\",\n//       \"burger\": 2,\n//       \"burgerColor\": \"hsl(257, 70%, 50%)\",\n//       \"sandwich\": 153,\n//       \"sandwichColor\": \"hsl(312, 70%, 50%)\",\n//       \"kebab\": 17,\n//       \"kebabColor\": \"hsl(53, 70%, 50%)\",\n//       \"fries\": 11,\n//       \"friesColor\": \"hsl(251, 70%, 50%)\",\n//       \"donut\": 32,\n//       \"donutColor\": \"hsl(198, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AF\",\n//       \"hot dog\": 191,\n//       \"hot dogColor\": \"hsl(35, 70%, 50%)\",\n//       \"burger\": 166,\n//       \"burgerColor\": \"hsl(5, 70%, 50%)\",\n//       \"sandwich\": 53,\n//       \"sandwichColor\": \"hsl(91, 70%, 50%)\",\n//       \"kebab\": 117,\n//       \"kebabColor\": \"hsl(246, 70%, 50%)\",\n//       \"fries\": 33,\n//       \"friesColor\": \"hsl(224, 70%, 50%)\",\n//       \"donut\": 77,\n//       \"donutColor\": \"hsl(145, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AG\",\n//       \"hot dog\": 150,\n//       \"hot dogColor\": \"hsl(163, 70%, 50%)\",\n//       \"burger\": 104,\n//       \"burgerColor\": \"hsl(229, 70%, 50%)\",\n//       \"sandwich\": 64,\n//       \"sandwichColor\": \"hsl(270, 70%, 50%)\",\n//       \"kebab\": 60,\n//       \"kebabColor\": \"hsl(223, 70%, 50%)\",\n//       \"fries\": 29,\n//       \"friesColor\": \"hsl(76, 70%, 50%)\",\n//       \"donut\": 21,\n//       \"donutColor\": \"hsl(283, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AI\",\n//       \"hot dog\": 99,\n//       \"hot dogColor\": \"hsl(312, 70%, 50%)\",\n//       \"burger\": 149,\n//       \"burgerColor\": \"hsl(192, 70%, 50%)\",\n//       \"sandwich\": 8,\n//       \"sandwichColor\": \"hsl(287, 70%, 50%)\",\n//       \"kebab\": 179,\n//       \"kebabColor\": \"hsl(92, 70%, 50%)\",\n//       \"fries\": 13,\n//       \"friesColor\": \"hsl(284, 70%, 50%)\",\n//       \"donut\": 11,\n//       \"donutColor\": \"hsl(171, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AL\",\n//       \"hot dog\": 43,\n//       \"hot dogColor\": \"hsl(287, 70%, 50%)\",\n//       \"burger\": 33,\n//       \"burgerColor\": \"hsl(62, 70%, 50%)\",\n//       \"sandwich\": 109,\n//       \"sandwichColor\": \"hsl(185, 70%, 50%)\",\n//       \"kebab\": 162,\n//       \"kebabColor\": \"hsl(152, 70%, 50%)\",\n//       \"fries\": 47,\n//       \"friesColor\": \"hsl(33, 70%, 50%)\",\n//       \"donut\": 79,\n//       \"donutColor\": \"hsl(68, 70%, 50%)\"\n//     },\n//     {\n//       \"country\": \"AM\",\n//       \"hot dog\": 74,\n//       \"hot dogColor\": \"hsl(48, 70%, 50%)\",\n//       \"burger\": 150,\n//       \"burgerColor\": \"hsl(191, 70%, 50%)\",\n//       \"sandwich\": 16,\n//       \"sandwichColor\": \"hsl(106, 70%, 50%)\",\n//       \"kebab\": 18,\n//       \"kebabColor\": \"hsl(117, 70%, 50%)\",\n//       \"fries\": 120,\n//       \"friesColor\": \"hsl(301, 70%, 50%)\",\n//       \"donut\": 149,\n//       \"donutColor\": \"hsl(149, 70%, 50%)\"\n//     }\n//   ]\n\n\nexport const DawgResponsiveBar: React.FC<IProps> = ( { walkHistory } ) => {\n  const graphData = groupByDate(walkHistory);\n  const graphDataPts:IDisplayGraphDataPoint[] = Object.entries(graphData).map(\n    ([key, value]) => {\n      return {date: key, short: value.short, medium: value.medium, long: value.long}\n    }\n  );\n  if(graphDataPts.length > 0) {\n    return <ResponsiveDawgActivityRenderer graphDataPts={graphDataPts}/>\n  }\n    return null // vs <></> both are ok\n  }\nexport default DawgResponsiveBar;","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport {blue, silver } from '../utils/constants';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${silver};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${blue};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${blue};\n`;\n\ninterface IProps {\n  totalActivityTime: number\n}\n\nexport const ProgressNotification: React.FC<IProps> = ({ totalActivityTime }) => {\n  const formatActivityTime = moment(totalActivityTime).format('mm:ss');\n    if(totalActivityTime > 0) {\n    return (\n      <NotificationContainer>\n        <NotificationText>Total Activity Time \n          <StrongSpan> {formatActivityTime}</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    );\n  }\n\n  return (\n    <NotificationContainer>\n      <NotificationText>View your Dawg's activity feed here!</NotificationText>\n    </NotificationContainer>\n  );\n};\n\n\nexport default ProgressNotification;","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { Page } from '../../components/Page';\nimport { DawgResponsiveBar } from '../../components/DawgResponsiveBar';\nimport { DawgWalks } from '../../components/DawgWalks';\nimport { Pagination } from '../../components/Pagination';\nimport { ProgressNotification } from '../../components/ProgressNotification';\nimport { IWalk } from '../../utils/types';\nimport { LogoWrapper, Logo } from '../../components/SharedStyles';\nimport { red } from '../../utils/constants';\nimport { calculateWeeklyActivityTime } from '../../utils/timeCalculation';\n\nconst ReportContainer = styled.div`\n  padding: 1\n  border: 3px solid ${red};\n  height: 350px;\n  width: 75%;\n  alignment-baseline: baseline\n`;\n\ninterface IProps {\n  walkHistory: IWalk[]\n}\nexport const ProgressReport: React.FC<IProps> = ({ walkHistory }) => {\n  const [loading, setLoading] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1);\n  const [walksPerPage, setWalksPerPage] = useState(5);\n\n  // Get current walks\n  const indexOfLastWalk = currentPage * walksPerPage;\n  const indexOfFirstWalk = indexOfLastWalk - walksPerPage;\n  const currentWalks = walkHistory.slice(indexOfFirstWalk, indexOfLastWalk);\n  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n  const totalActivityTime = calculateWeeklyActivityTime(walkHistory) * 1000;\n\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Progress Report <br />\n          </Logo>\n        </LogoWrapper>\n        <ReportContainer>\n          <ProgressNotification totalActivityTime={totalActivityTime}/>\n          {/* <DawgWalks walks={currentWalks} loading={loading}/>\n          <Pagination\n            walksPerPage={walksPerPage}\n            totalWalks={walkHistory.length}\n            paginate={paginate} /> */}\n\n        <DawgResponsiveBar walkHistory={walkHistory}/>   \n        </ReportContainer>\n      </Page>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T, resetLocalStorage: boolean = false) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return !item || resetLocalStorage ? initialValue : JSON.parse(item);\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  // local storage is automatically set when state is updated.\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\n// import { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { Caveletti } from '../pages/Caveletti';\nimport { ProgressReport } from '../pages/ProgressReport';\nimport { IWalk } from '../utils/types';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  margin: 0 auto;\n`;\n\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ walkHistory, setWalkHistory ] = useLocalStorage<IWalk[]>('walkHistory', []); \n  const [ walkTimeStamps, setWalkTimeStamps ] = useLocalStorage<number[]>('walkTimeStamps', []); \n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setWalkTimeStamps={setWalkTimeStamps} walkTimeStamps={walkTimeStamps}/>} />\n        <Route path=\"/walks/:grade/\" exact>\n          <ActiveWalk setWalkHistory={setWalkHistory} walkTimeStamps={walkTimeStamps} setWalkTimeStamps={setWalkTimeStamps}/>\n\n        </Route>\n        <Route path=\"/cavaletti/:grade/\" exact component={Caveletti} setWalkHistory={setWalkHistory} />\n        <Route path=\"/progress\" exact>\n          <ProgressReport walkHistory={walkHistory}/>\n        </Route>\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\nconst DawgHouse = styled(HomeSmile)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabHome: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgHouse color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nconst DawgProgress = styled(LineChart)`\n  max-width: 36px\n  height: 36px;\n  width: 36px;\n`;\n\ninterface IProps {\n  fill?: string;\n}\n\nexport const RehabProgress: React.FC<IProps> = ({ fill = 'black' }) => (\n  <DawgProgress color={fill} />\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { RehabHome } from '../assets/svg/Home';\nimport { RehabProgress } from '../assets/svg/Progress';\n\nimport { white, blue, navBarHeight} from '../utils/constants';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  // padding: 5px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: ${white};\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  // font-size: 12px;\n  padding: 5px;\n`;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <RehabHome fill={blue}/>\n        </NavLink>\n        <NavLink to='/progress'>\n          <RehabProgress fill={blue}/>\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}