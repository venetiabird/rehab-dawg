{"version":3,"sources":["components/Page.tsx","utils/constants.ts","components/SharedStyles.ts","assets/svg/ColouredShapes.tsx","assets/svg/Dawg.tsx","components/Navigation.tsx","pages/HomePage.tsx","hooks/useLocalStorage.ts","hooks/useIsClient.ts","assets/svg/Resume.tsx","assets/svg/Pause.tsx","utils/timeFormatter.ts","components/Timer.tsx","assets/svg/Done.tsx","pages/ActiveWalk/ActiveWalk.tsx","components/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageContainer","styled","div","Heading","h2","Page","heading","children","LogoWrapper","Logo","ButtonBaseWithLink","Link","props","color","background","RedPaw","Paw","ColouredPaw","svg","fill","Dawg","GuideDog","RehabDawg","NavIconContainer","NavLink","Navigation","to","StartButton","HomePage","setActiveWalk","onClick","walkName","startDateTime","Date","now","useLocalStorage","key","initialValue","isClient","useState","setClient","useEffect","useIsClient","console","log","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ResumeDawg","Play","ResumeWalk","handleClick","href","PauseDawg","Pause","PauseWalk","timeLeftInMilliseconds","walkTimeMilliSeconds","difference","pad","input","toString","padStart","CountDownDawg","PauseResumeContainer","Timer","walkTime","timeLeft","setTimeLeft","timer","setTimeout","clearTimeout","minutes","Math","floor","seconds","formatTimeLeft","alert","DoneDawg","Bone","DoneWalk","DoneButton","walkMap","ActiveWalk","history","pop","walkGrade","useParams","MaxWidthContainer","Routes","location","useLocation","undefined","activeWalk","setaActiveWalk","path","exact","render","component","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b71b0bed.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n// import { useLocation } from 'react-router-dom';\n\nimport Navigation from './Navigation';\n\nimport { \n  gutterWidth,\n} from '../utils/constants';\n\nconst PageContainer = styled.div`\n  height: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  padding: 0 ${gutterWidth}px;\n`;\n\n// background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n// height: calc(100vh - 50px);\n// display: flex;\n// flex-direction: column;\n// justify-content: space-around;\n\nconst Heading = styled.h2`\n  margin: ${gutterWidth}px;\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n`;\n\ninterface Props {\n  heading: string;\n}\n\nexport const Page: React.FC<Props> = ({\n  heading,\n  children,\n}) => {\n  // const location = useLocation();\n  return (\n    <>\n      <PageContainer>\n        <Heading>{heading}</Heading>\n        {children}\n      </PageContainer>\n      {/* <Navigation /> */}\n    </>\n  );\n};","// gutterWidth, green, bannerHeight, blue\n\nexport const appMaxWidth = 812;\nexport const navBarHeight = 48;\nexport const gutterWidth = 16;\nexport const bannerHeight = 48;\nexport const green = '#02d386';\nexport const blue = '#198FE3';\nexport const purple = '#6702ff';\nexport const orange = '#f79729';\nexport const red = '#ff0000';\nexport const black = '#000000';\nexport const silver = '#C0C0C0';\nexport const white = '#ffffff';\nexport const lightblue = '#0277bd';\nexport const darkgreen = '#006400';\n","import styled from 'styled-components';\nimport {Link} from 'react-router-dom';\n\nimport {\n  purple,\n} from '../utils/constants';\n\nexport interface ButtonStyleProps { background?: string; color?: string; }\nconst buttonStyle = `\n  border: none;\n  font-size: 12px;\n  border-radius: 10px;\n  text-transform: uppercase;\n  font-weight: 800;\n  z-index: 1;\n  text-decoration: none;\n  padding: 0 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 48px;\n`;\n\nexport const LogoWrapper = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n\nexport const Logo = styled.h2`\n  font-family: 'Muli', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 900;\n  font-size: 2em;\n  border-radius: 0;\n  padding: 0;\n  color: black;\n  align-items: center;\n`;\n\nexport const ButtonBaseWithLink = styled(Link)<ButtonStyleProps>`\n${buttonStyle}\n  color: ${props => props.color || 'white'};\n  background-color: ${props => props.background || purple};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Paw } from '@styled-icons/ionicons-solid/Paw';\n\nconst RedPaw = styled(Paw)`\n  height: 20px;\n  display: inline;\n  width: 20px;\n  margin-right: 10px;\n`;\n\nconst Svg = styled.svg`\n  height: 8px;\n  display: inline;\n  width: 8px;\n  margin-right: 8px;\n`;\n\ninterface Props {\n  fill?: string;\n}\n\nexport const ColouredSquare: React.FC<Props> = ({ fill = 'black' }) => (\n  <Svg role=\"img\" width='8' height='8' fill={fill}>\n    {/* <circle cx=\"4\" cy=\"4\" r=\"4\" /> */}\n    <rect width='10' height='10' x='0' y='0'/>\n  </Svg>\n);\n\nexport const ColouredPaw: React.FC<Props> = ({ fill = 'black'}) => (\n  <RedPaw color={fill}/>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { GuideDog } from '@styled-icons/foundation/GuideDog';\n\nconst Dawg = styled(GuideDog)`\n  height: 45px;\n  width: 45px;\n  margin-left: 0px;\n`;\n\ninterface Props {\n  fill?: string;\n}\n\nexport const RehabDawg: React.FC<Props> = ({ fill = 'black'}) => (\n  <Dawg color={fill}/>\n);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { HomeSmile } from '@styled-icons/boxicons-regular/HomeSmile';\n\n// import { RehabHome } from '../assets/svg/Home';\n// import { RehabProgress } from '../assets/svg/Progress';\nimport { LineChart } from '@styled-icons/boxicons-regular/LineChart';\n\nimport { white, appMaxWidth,  navBarHeight} from '../utils/constants';\n\n\n// const NavigationIcon = styled(HomeSmile)`\n//   max-width: 36px\n// `;\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  max-width: ${appMaxWidth}px;\n  justify-content: space-around;\n  // add an extra 0.5 to the height to account for the 0.5px border\n  min-height: ${navBarHeight}.5px;\n  background-color: white;\n  color: black;\n  box-sizing: border-box;\n  align-items: center;\n  padding-bottom: env(safe-area-inset-bottom); // this is for the IPhoneX notch\n`;\n\nconst NavLink = styled(Link)`\n  fill: purple;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 12px;\n  padding: 14px;\n`;\n\n// const NavigationIcon = styled.img`\n//     max-width: 36px;\n// `;\n\n\nexport const Navigation: React.FC = () => {\n  return (\n    <>\n      <NavIconContainer>\n        <NavLink to='/'>\n          <HomeSmile />\n        </NavLink>\n        <NavLink to='/progress'>\n          <LineChart />\n        </NavLink>\n      </NavIconContainer>\n    </>\n  );\n};\nexport default Navigation;\n\n","import React, {useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Page} from '../components/Page';\nimport {ButtonBaseWithLink, LogoWrapper, Logo} from '../components/SharedStyles';\nimport {ColouredPaw} from '../assets/svg/ColouredShapes';\nimport { green, red, blue } from '../utils/constants';\nimport {RehabDawg} from '../assets/svg/Dawg';\nimport Navigation from '../components/Navigation';\nimport Notification from '../components/Notification';\nimport { IActiveWalk } from '../utils/types';\n// import useLocalStorage from '../hooks/useLocalStorage';\n\n\nconst StartButton = styled(ButtonBaseWithLink)`\n  background: black;\n`;\n\ninterface Props {\n  setActiveWalk: (aw: IActiveWalk) => void\n}\n\nexport const HomePage: React.FC<Props> = ({ setActiveWalk }) => {\n  const handleClick = () => setActiveWalk({ walkName: 'green', startDateTime: Date.now()});\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Rehab Dawg <br />\n            <RehabDawg fill={green}/>\n            <RehabDawg fill={blue}/>\n            <RehabDawg fill={red}/>\n          </Logo>\n        </LogoWrapper>\n        <StartButton to=\"/walks/green\" onClick={handleClick}>\n          <ColouredPaw fill={green} />\n          5 minutes\n        </StartButton>\n        <StartButton to=\"/walks/blue\">\n          <ColouredPaw fill={blue} />\n          10 minutes\n        </StartButton>\n        <StartButton to=\"/walks/red\">\n          <ColouredPaw fill={red}/>\n          15 minutes\n        </StartButton>\n        {/* <Notification history={history} /> */}\n      </Page>\n      <Navigation />\n    </>\n  );\n};","import { useState } from 'react';\nimport useIsClient from './useIsClient';\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // Prevent build error \"window is undefined\" but keep keep working\n  const isClient = useIsClient();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage then\n    // parse stored json or return initialValue\n    console.log('isClient ==> ', isClient)\n    if (!isClient) {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      if (isClient) {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}","import { useEffect, useState } from 'react';\n\nexport default function useIsClient() {\n  const [isClient, setClient] = useState(false);\n  useEffect(() => {\n    setClient(true);\n  }, []);\n  return isClient;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Play } from '@styled-icons/fa-solid/Play';\n\nconst ResumeDawg = styled(Play)`\n  height: 30px;\n  width: 30px;\n  margin-left: 30px;\n`;\n\ninterface Props {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const ResumeWalk: React.FC<Props> = ({ fill = 'black', handleClick}) => (\n  <a href='#'>\n    <ResumeDawg color={fill} onClick={handleClick}/>\n  </a>\n);","import React from 'react';\nimport styled from 'styled-components';\nimport { Pause } from '@styled-icons/fa-solid/Pause';\n\nconst PauseDawg = styled(Pause)`\n  height: 30px;\n  width: 30px;\n`;\n\ninterface Props {\n  fill?: string;\n  handleClick: () => void;\n}\n\nexport const PauseWalk: React.FC<Props> = ({ fill = 'black',   handleClick }) => (\n  <a href='#'> \n    <PauseDawg color={fill} onClick={handleClick} />\n  </a> \n);","interface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const timeLeftInMilliseconds = (walkTimeMilliSeconds: number): number => {\n  const difference = walkTimeMilliSeconds  - 1000;\n  if (difference > 0) {\n    return difference;\n  }\n  return 0;\n};\n\nexport const formatTimeLeft = (difference: number): Dictionary<number> | string => {\n  if (difference > 0) {\n    const minutes = Math.floor((difference / 1000 / 60) % 60);\n    const seconds = Math.floor((difference / 1000) % 60);\n    return `${pad(minutes)}:${pad(seconds)}`;\n  } \n  return 'All done!';\n};\n\nconst pad = (input: number): string => input.toString().padStart(2, '0');\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nimport {ResumeWalk} from '../assets/svg/Resume';\nimport {PauseWalk} from '../assets/svg/Pause';\nimport {timeLeftInMilliseconds, formatTimeLeft} from '../utils/timeFormatter';\nimport { darkgreen, orange } from '../utils/constants';\n\nconst CountDownDawg = styled.div`\n  height: 10px;\n  font-size: 28px;\n  font: courier;\n  font-weight: 800; \n  text-align: center;\n  display: flex;\n`;\nconst PauseResumeContainer = styled.div`\n  display: flex;\n`;\ninterface Props {\n  walkTime: number;\n}\n\nexport const Timer: React.FC<Props> = ({ walkTime = 0 }) => {\n  const walkTimeMilli = walkTime * 60 * 1000;\n  const [timeLeft, setTimeLeft] = useLocalStorage('timeLeft', timeLeftInMilliseconds(walkTimeMilli));\n  \n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(() => timeLeftInMilliseconds(timeLeft));\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n\n  return (\n    <>\n      <CountDownDawg>\n        {formatTimeLeft(timeLeft)}\n      </CountDownDawg>\n      <PauseResumeContainer>\n        <PauseWalk fill={orange} handleClick={() => alert('Pausing!')}/>\n        <ResumeWalk fill={darkgreen} handleClick={() => alert('Resuming')}/>\n      </PauseResumeContainer>\n    </>\n  );\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { Bone } from '@styled-icons/fa-solid/Bone';\n\nconst DoneDawg = styled(Bone)`\n  height: 15px;\n  width: 15px;\n  padding: 5px;\n`;\n\ninterface Props {\n  fill?: string;\n}\n\nexport const DoneWalk: React.FC<Props> = ({ fill = 'black'}) => (\n  <DoneDawg color={fill}>\n    Done!\n  </DoneDawg>\n);","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router-dom';\n\nimport {Page} from '../../components/Page';\nimport {Timer} from '../../components/Timer';\nimport {DoneWalk} from '../../assets/svg/Done';\nimport {RehabDawg} from '../../assets/svg/Dawg';\nimport {ButtonBaseWithLink, Logo, LogoWrapper} from '../../components/SharedStyles';\nimport { white } from '../../utils/constants';\nimport { IWalk } from '../../utils/types';\nimport useLocalStorage from '../../hooks/useLocalStorage';\n\nconst DoneButton = styled(ButtonBaseWithLink)`\n  background: black;\n  width: 25%;\n`;\n\ntype WalkName = 'green' | 'blue' | 'red'\n\nconst walkMap = {\n  'green': 5,\n  'blue': 10,\n  'red': 15\n};\n\nconst sessionTime = (walkName: WalkName): number => {\n  return walkMap[walkName];\n};\n\nexport const ActiveWalk: React.FC = () => {\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const [ timeLeft, setTimeLeft ] = useLocalStorage<number>('timeLeft', 0); \n  const currentWalk = history.pop();\n  console.log('===>', history);\n  const { walkGrade } = useParams();\n  const walkTime = sessionTime(walkGrade);\n  const MINUTES_TO_MILLISECONDS = 60 * 1000;\n  return (\n    <>\n      <Page heading={''}>\n        <LogoWrapper>\n          <Logo>\n            Walk Session <br />\n            <RehabDawg fill={walkGrade}/>\n          </Logo>\n        </LogoWrapper>\n        <Timer walkTime={walkTime} />\n        {/* <DoneWalk fill={'lightblue'}>Done</DoneWalk> */}\n        <DoneButton to=\"/home\">\n          <DoneWalk fill={white} />\n          Done\n          <DoneWalk fill={white} />\n        </DoneButton>\n        {/* <button onClick={() => setCount(count + 1)}>\n          Count\n        </button>\n        {count} */}\n      </Page>\n    </>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport {useLocation, Route, Switch } from 'react-router-dom'; // read up on this\n\nimport { appMaxWidth } from '../utils/constants';\nimport { HomePage } from '../pages/HomePage';\nimport { ActiveWalk } from '../pages/ActiveWalk';\nimport { IWalk } from '../utils/types';\nimport { IActiveWalk } from '../utils/types';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst MaxWidthContainer = styled.div`\n  max-width: ${appMaxWidth}px;\n  margin: 0 auto;\n`;\n\nconst Routes: React.FC = () => {\n  const location = useLocation();\n  const [ history, setHistory ] = useLocalStorage<IWalk[]>('history', []); \n  const [ activeWalk, setaActiveWalk ] = useLocalStorage<IActiveWalk | undefined>('activeWalk', undefined); \n  console.log('==> AW:', activeWalk);\n  return (\n    <MaxWidthContainer>\n      <Switch location={location}>\n        <Route path=\"/\" exact>\n          <HomePage setActiveWalk={setaActiveWalk} />\n        </Route>\n        <Route path=\"/home\" exact render={() => <HomePage setActiveWalk={setaActiveWalk} />} />\n        <Route path=\"/walks/:walkGrade/\" exact component={ActiveWalk} />\n      </Switch>\n    </MaxWidthContainer>\n  );\n};\nexport default Routes;\n\n// read up on react-router-dom\n// read up on local storage\n// how to store data \n// where does the state live? with regard to the components","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport Navigation from './components/Navigation';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Routes />\n      <Navigation />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}